if(isgene){
tmp = annot[which(annot[,"entrezgene"]==gene),"ensembl_gene_id"];
if (length(tmp) == 0){
return(NA)
}else{
return(tmp)
}
}else{
tmp = annot[which(annot[,"entrezgene"]==gene),"ensembl_transcript_id"];
if (length(tmp) == 0){
return(NA)
}else{
return(tmp)
}
}
# Formatting Hugo gene symbols
}else{
if(isgene){
tmp = annot[which(annot[,"hgnc_symbol"]==gene),"ensembl_gene_id"];
if (length(tmp) == 0){
return(NA)
}else{
return(tmp)
}
}else{
tmp = annot[which(annot[,"hgnc_symbol"]==gene),"ensembl_transcript_id"];
if (length(tmp) == 0){
return(NA)
}else{
return(tmp)
}
}
}
}
in_pgAmat <- function(pgAmat,gene){
if(substr(gene,1,4) == 'ENSG'){
if(gene %in% names(pgAmat)){
return(TRUE)
}else{
return(FALSE)
}
}else if(substr(gene,1,4) == 'ENST'){
if(length(grep(gene,names(pgAmat)))>0){
return(TRUE)
}else{
return(FALSE)
}
}else{
message("Error in query gene")
return(NA)
}
}
find_pgAmats <- function(genes,dataset){
message('Finding pgAmats containing gene')
tmp = list()
if(all(is.na(genes)==TRUE)){
return(NA)
}else{
for(gene in genes){
tmp[[gene]] = names(dataset)[which(unlist(lapply(dataset,in_pgAmat, gene=gene)))]
}
}
tmp = unlist(tmp)
tmp = unique(tmp)
return(tmp)
}
int_graph <- function(pgAmat){
message('Generating and plotting network figure')
names <- colnames(pgAmat);
i=0;
for(name in names){
i=i+1;
if(name %in% annot[,"ensembl_gene_id"]){
message('Gene with gene symbol')
tmp = annot[which(annot[,"ensembl_gene_id"]==name),"hgnc_symbol"]
if(!is.na(tmp)){
names[i] = paste0("Gene: ", tmp, ": ", name)
}else{
names[i] = paste0("Gene: ",name)
}
}else if(substr(name,1,regexpr("\\.",name)-1) %in% annot[,"ensembl_transcript_id"]){
message('Pseudogene with gene symbol')
tmp = annot[which(annot[,"ensembl_transcript_id"]==substr(name,1,regexpr("\\.",name)-1)),"hgnc_symbol"]
if(!is.na(tmp)){
names[i] = paste0("Pseudogene: ", tmp, ": ", name)
}else{
names[i] = paste0("Pseudogene: ",name)
}
}else if(substr(name,1,4)=="ENST"){
message('Pseudogene without gene symbol')
names[i] = paste0("Pseudogene: ",name)
}else{
message('Gene without gene symbol')
names[i] = paste0("Gene: ",name)
}
}
row.names(pgAmat) = names;
colnames(pgAmat) = names;
g = graph_from_adjacency_matrix(log2(pgAmat),mode="undirected",weighted=TRUE);
E(g)$weight = max(E(g)$weight)-E(g)$weight;
mstg = mst(g,weights=E(g)$weight);
E(g)$weight = max(E(g)$weight)+E(g)$weight;
E(mstg)$weight = max(E(mstg)$weight)+E(mstg)$weight
wc <- cluster_walktrap(mstg)
members <- membership(wc)
nd3g = igraph_to_networkD3(mstg,group=members)
return(nd3g)
# plotted D3 graph now returns D3 graph
#forceNetwork(Links = nd3g$links, Nodes=nd3g$nodes,
#             Source = 'source', Target = 'target', NodeID = 'name',
#             Group = 'group')
#plot.igraph(mstg,vertex.label=V(mstg)$name,layout=layout.fruchterman.reingold, edge.color="black",edge.width=E(mstg)$weight)
}
search2network <- function(gene,isgene,dataset,annot,idx){
genes <- map_genes(gene,isgene,annot);
pgAmats <- find_pgAmats(genes,dataset);
if(idx<=length(pgAmats)){
return(int_graph(as.matrix(dataset[[pgAmats[idx]]])))
}else{
return(NA)
}
}
num_networks <- function(gene,isgene,dataset,annot){
genes <- map_genes(gene,isgene,annot)
pgAmats <- find_pgAmats(genes,dataset)
return(length(pgAmats))
}
search2GOtbl <- function(gene,isgene,go,dataset,annot,inc0){
if(go != "Do Not Run GO Analysis"){
if(go=="Run GO Analysis: Biological Process"){ontol="BP"; top_nodes=10000}
else if(go =="Run GO Analysis: Molecular Function"){ontol="MF"; top_nodes=2500}
else{ontol="CC"; top_nodes=1000}
library('org.Hs.eg.db')
message('Generating GO table')
genes <- map_genes(gene,isgene,annot);
pgAmats <- find_pgAmats(genes,dataset);
gene_set = c()
for(pgAmat in pgAmats){
gene_set <- rbind(names(dataset[[pgAmat]]))
}
genes_all <- factor(as.integer(annot[,'ensembl_gene_id'] %in% gene_set))
names(genes_all) <- annot[,'ensembl_gene_id'];
#genes_all = genes_all[!is.na(names(genes_all))]
#geneID2GO <- readMappings(file = system.file("examples/geneid2go.map", package = "topGO"))
#idx = c(which(genes_all==1),sample(which(genes_all==0), 10000, replace = FALSE))
#genes_all = genes_all[idx]
GOdata <- new("topGOdata",ontology = ontol,
allGenes = genes_all,
geneSel=function(p) p == 1,
description ="inNetwork",
annot=annFUN.org, mapping="org.Hs.eg.db", ID="Ensembl")
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
resultKS <- runTest(GOdata, algorithm = "classic", statistic = "ks")
resultKS.elim <- runTest(GOdata, algorithm = "elim", statistic = "ks")
allRes <- GenTable(GOdata, classicFisher = resultFisher,
classicKS = resultKS, elimKS = resultKS.elim,
orderBy = "elimKS", ranksOf = "classicFisher", topNodes = top_nodes)
if(inc0){
return(allRes)
}else{
return(allRes[allRes[,'Significant']>0,])
}
}else{
return("No GO Analysis")
}
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
myTabs
runApp()
myTabs
myTabs = lapply(c(paste('Network', 1: num_tabs),'GO Analysis','README'), tabPanel)
runApp()
myTabs = lapply(c(paste('Network', 1: num_tabs),'GO Analysis','README'), tabPanel)
num_tabs = 4
myTabs = lapply(c(paste('Network', 1: num_tabs),'GO Analysis','README'), tabPanel)
myTabs
runApp()
myTabs = vector('list',num_tabs+2)
i=1
while(i<=num_tabs){
myTabs[[i]] <- tabPanel(paste0('Network ',i),forceNetworkOutput(search2network(input$gene,input$isgene,dataset(),annot,i)))
i=i+1
}
myTabs[[1]] <- tabPanel("GO Analysis", tableOutput(GOtable()))
i=i+1
myTabs[[2]] <- tabPanel("README", tableOutput(readme()))
myTabs = vector('list',num_tabs+2)
i=1
while(i<=num_tabs){
myTabs[[i]] <- tabPanel(paste0('Network ',i),forceNetworkOutput(search2network(input$gene,input$isgene,dataset(),annot,i)))
i=i+1
}
runApp()
load("~/Desktop/myTabs.Rdata")
myTabs
View(myTabs)
View(myTabs)
View(myTabs)
myTabs[[1]]
myTabs2 = myTabs
myTabs = lapply(c(paste('Network', 1: num_tabs),'GO Analysis','README'), tabPanel)
num_tabs = 4
myTabs = lapply(c(paste('Network', 1: num_tabs),'GO Analysis','README'), tabPanel)
View(myTabs)
myTabs
myTabs2
myTabs[[3]]
myTabs2[[3]]
myTabs2[[1]]
myTabs[[1]]
myTabs2[[1]]
View(myTabs)
View(myTabs2)
myTabs2[[1]]
tableOutput(GOtable())
myTabs[[1]] <- tabPanel("GO Analysis", NULL)
myTabs2[[1]]
myTabs[[1]]
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
# Pathway mapping
X = read.table('/Volumes/Backup_data/mmrf_data/somatic_mutation_files/MMRF_CoMMpass_IA10c_All_Canonical_NS_Variants_ENSG_Mutation_Counts.txt',header=TRUE, row.names=1)
library(biomaRt)
listMarts(host='dec2013.archive.ensembl.org')
ensembl74 <- useMart(host='dec2013.archive.ensembl.org',
biomart='ENSEMBL_MART_ENSEMBL',
dataset='hsapiens_gene_ensembl')
annot <- getBM(attributes=c('ensembl_gene_id', 'entrezgene', 'hgnc_symbol', 'start_position', 'end_position', 'band'),
values=row.names(X),
mart=ensembl74)
idx <- match(row.names(X), annot$ensembl_gene_id)
entrez = annot[idx,'entrezgene'];
library(KEGG.db)
paths <- as.list(KEGGPATHID2EXTID);
pnames <- names(paths);
Y = matrix(0,length(paths),dim(X)[2]);
for (i in 1:dim(X)[2]){
for (j in 1:dim(X)[1]){
if (X[j,i] > 0){
matches <- sapply(1:length(paths), function(x) any(paths[[x]] == as.character(entrez[j])));
matches[is.na(matches)] = FALSE;
Y[matches,i] = Y[which(matches),i] + X[j,i];
}
}
}
row.names(Y) = pnames;
colnames(Y) = colnames(X);
Y = Y[grep('hsa',pnames),]
write.table(Y,'~/Desktop/MMRF_CoMMpass_IA10c_All_Canonical_NS_Variants_ENSG_Mutation_Counts_PathwayMapped_dec2013.txt',quote=FALSE)
X = read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_TRTRESP.csv',header=TRUE, row.names=1))
X = read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_TRTRESP.csv',
header=TRUE, row.names=1)
X = read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_TRTRESP.csv',
header=TRUE)
X = read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_TRTRESP.csv',
header=TRUE)
View(X)
pats = unique(X[,'public_id']);
tmp <- X[X[,'public_id']==pats[1],'pddy']
tmp
Y <- read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_SURVIVAL.csv',
header=TRUE, row.names=1)
View(Y)
X <- read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_SURVIVAL.csv',
header=TRUE, row.names=1)
X['MMRF_1193','pddy']
View(X)
blah = apply(X[,c('deathdy','lstalive','lvisitdy')],1,min)
blah = apply(X[,c('deathdy','lstalive','lvisitdy')],1,min(na.rm=TRUE))
blah = apply(X[,c('deathdy','lstalive','lvisitdy')],1,max)
max1 <- function(items){
return(max(items,na.rm=TRUE))
}
blah = apply(X[,c('deathdy','lstalive','lvisitdy')],1,max1)
sum(is.na(blah))
max1 <- function(items){
return(max(items,na.rm=TRUE))
}
X <- read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_SURVIVAL.csv',
header=TRUE, row.names=1)
pats <- row.names(X)
cox_out <- matrix(length(pats),2)
colnames(cox_out) <- c('time','cens')
row.names(cox_out) <- c('pats')
time = apply(X[,c('deathdy','lstalive','lvisitdy')],1,max1)
cox_out[X[,'pdflag']==1,'time'] = X[X[,'pdflag']==1,'pddy']
cox_out[X[,'pdflag']==0,'time'] = time[X[,'pdflag']==0]
max1 <- function(items){
return(max(items,na.rm=TRUE))
}
X <- read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_SURVIVAL.csv',
header=TRUE, row.names=1)
pats <- row.names(X)
cox_out <- matrix(length(pats),2)
colnames(cox_out) <- c('time','cens')
row.names(cox_out) <- c('pats')
max1 <- function(items){
return(max(items,na.rm=TRUE))
}
X <- read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_SURVIVAL.csv',
header=TRUE, row.names=1)
pats <- row.names(X)
cox_out <- matrix(NA,length(pats),2)
colnames(cox_out) <- c('time','cens')
row.names(cox_out) <- c('pats')
time = apply(X[,c('deathdy','lstalive','lvisitdy')],1,max1)
warnings()
X <- read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_SURVIVAL.csv',
header=TRUE, row.names=1)
pats <- row.names(X)
cox_out <- matrix(NA,length(pats),2)
colnames(cox_out) <- c('time','cens')
row.names(cox_out) <- c('pats')
time = apply(X[,c('deathdy','lstalive','lvisitdy')],1,max1)
time[time==-Inf] = NA
cox_out[X[,'pdflag']==1,'time'] = X[X[,'pdflag']==1,'pddy']
cox_out[X[,'pdflag']==0,'time'] = time[X[,'pdflag']==0]
max1 <- function(items){
return(max(items,na.rm=TRUE))
}
X <- read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_SURVIVAL.csv',
header=TRUE, row.names=1)
pats <- row.names(X)
cox_out <- matrix(NA,length(pats),2)
colnames(cox_out) <- c('time','cens')
row.names(cox_out) <- c(pats)
time = apply(X[,c('deathdy','lstalive','lvisitdy')],1,max1)
time[time==-Inf] = NA
max1 <- function(items){
return(max(items,na.rm=TRUE))
}
X <- read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_SURVIVAL.csv',
header=TRUE, row.names=1)
pats <- row.names(X)
cox_out <- matrix(NA,length(pats),2)
colnames(cox_out) <- c('time','cens')
row.names(cox_out) <- c(pats)
time = apply(X[,c('deathdy','lstalive','lvisitdy')],1,max1)
time[time==-Inf] = NA
cox_out[X[,'pdflag']==1,'time'] = X[X[,'pdflag']==1,'pddy']
cox_out[X[,'pdflag']==0,'time'] = time[X[,'pdflag']==0]
max1 <- function(items){
return(max(items,na.rm=TRUE))
}
X <- read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_SURVIVAL.csv',
header=TRUE, row.names=1)
pats <- row.names(X)
cox_out <- matrix(NA,length(pats),2)
colnames(cox_out) <- c('time','cens')
row.names(cox_out) <- c(pats)
time = apply(X[,c('deathdy','lstalive','lvisitdy')],1,max1)
time[time==-Inf] = NA
cox_out[X[,'pdflag']==1,'time'] = X[X[,'pdflag']==1,'pddy']
cox_out[X[,'pdflag']==0,'time'] = time[X[,'pdflag']==0]
View(cox_out)
max1 <- function(items){
return(max(items,na.rm=TRUE))
}
X <- read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_SURVIVAL.csv',
header=TRUE, row.names=1)
time = apply(X[,c('deathdy','lstalive','lvisitdy')],1,max1)
time[time==-Inf] = NA
X = X[!is.na(time)];
pats <- row.names(X)
max1 <- function(items){
return(max(items,na.rm=TRUE))
}
X <- read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_SURVIVAL.csv',
header=TRUE, row.names=1)
time = apply(X[,c('deathdy','lstalive','lvisitdy')],1,max1)
time[time==-Inf] = NA
X = X[!is.na(time),];
pats <- row.names(X)
cox_out <- matrix(NA,length(pats),2)
colnames(cox_out) <- c('time','cens')
row.names(cox_out) <- c(pats)
time = time[!is.na(time)];
cox_out[X[,'pdflag']==1,'time'] = X[X[,'pdflag']==1,'pddy']
cox_out[X[,'pdflag']==0,'time'] = time[X[,'pdflag']==0]
View(cox_out)
sum(is.na(X[,'pdflag']))
max1 <- function(items){
return(max(items,na.rm=TRUE))
}
X <- read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_SURVIVAL.csv',
header=TRUE, row.names=1)
time = apply(X[,c('deathdy','lstalive','lvisitdy')],1,max1)
time[time==-Inf] = NA
X = X[!is.na(time),];
pats <- row.names(X)
cox_out <- matrix(NA,length(pats),2)
colnames(cox_out) <- c('time','cens')
row.names(cox_out) <- c(pats)
time = time[!is.na(time)]
time = time[!is.na(X[,'pdflag'])]
X = X[!is.an(X[,'pdflag']),]
max1 <- function(items){
return(max(items,na.rm=TRUE))
}
X <- read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_SURVIVAL.csv',
header=TRUE, row.names=1)
time = apply(X[,c('deathdy','lstalive','lvisitdy')],1,max1)
time[time==-Inf] = NA
X = X[!is.na(time),];
pats <- row.names(X)
cox_out <- matrix(NA,length(pats),2)
colnames(cox_out) <- c('time','cens')
row.names(cox_out) <- c(pats)
time = time[!is.na(time)]
time = time[!is.na(X[,'pdflag'])]
X = X[!is.na(X[,'pdflag']),]
cox_out[X[,'pdflag']==1,'time'] = X[X[,'pdflag']==1,'pddy']
cox_out[X[,'pdflag']==0,'time'] = time[X[,'pdflag']==0]
max1 <- function(items){
return(max(items,na.rm=TRUE))
}
X <- read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_SURVIVAL.csv',
header=TRUE, row.names=1)
time = apply(X[,c('deathdy','lstalive','lvisitdy')],1,max1)
time[time==-Inf] = NA
X = X[!is.na(time),];
pats <- row.names(X)
time = time[!is.na(time)]
time = time[!is.na(X[,'pdflag'])]
X = X[!is.na(X[,'pdflag']),]
cox_out <- matrix(NA,length(pats),2)
colnames(cox_out) <- c('time','cens')
row.names(cox_out) <- c(pats)
cox_out[X[,'pdflag']==1,'time'] = X[X[,'pdflag']==1,'pddy']
cox_out[X[,'pdflag']==0,'time'] = time[X[,'pdflag']==0]
max1 <- function(items){
return(max(items,na.rm=TRUE))
}
X <- read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_SURVIVAL.csv',
header=TRUE, row.names=1)
time <- apply(X[,c('deathdy','lstalive','lvisitdy')],1,max1)
time[time==-Inf] <- NA
X <- X[!is.na(time),];
pats <- row.names(X)
time <- time[!is.na(time)]
time <- time[!is.na(X[,'pdflag'])]
pats <- pats[!is.na(X[,'pdflag'])]
X <- X[!is.na(X[,'pdflag']),]
cox_out <- matrix(NA,length(pats),2)
colnames(cox_out) <- c('time','cens')
row.names(cox_out) <- c(pats)
cox_out[X[,'pdflag']==1,'time'] <- X[X[,'pdflag']==1,'pddy']
cox_out[X[,'pdflag']==0,'time'] <- time[X[,'pdflag']==0]
View(cox_out)
max1 <- function(items){
return(max(items,na.rm=TRUE))
}
X <- read.csv('~/Desktop/DE_MMRF/MMRF_CoMMpass_IA11_STAND_ALONE_SURVIVAL.csv',
header=TRUE, row.names=1)
time <- apply(X[,c('deathdy','lstalive','lvisitdy')],1,max1)
time[time==-Inf] <- NA
X <- X[!is.na(time),];
pats <- row.names(X)
time <- time[!is.na(time)]
time <- time[!is.na(X[,'pdflag'])]
pats <- pats[!is.na(X[,'pdflag'])]
X <- X[!is.na(X[,'pdflag']),]
cox_out <- matrix(NA,length(pats),2)
colnames(cox_out) <- c('time','cens')
row.names(cox_out) <- c(pats)
cox_out[X[,'pdflag']==1,'time'] <- X[X[,'pdflag']==1,'pddy']
cox_out[X[,'pdflag']==0,'time'] <- time[X[,'pdflag']==0]
cox_out[,'cens'] <- X[,'pdflag']
View(cox_out)
cox_out[,'cens'] <- ifelse(X[,'pdflag'],0,1)
write.table(cox_out,'~/Desktop/DE_MMRF/cox_2yr_rec_6-14-18.csv',quote=FALSE)
View(cox_out)
write.csv(cox_out,'~/Desktop/DE_MMRF/cox_2yr_rec_6-14-18.csv',quote=FALSE)
runApp()
runApp()
install.packages('shinyWidgets')
runApp()
runApp()
rsconnect::deployApp('~/Desktop/NAR_2018/PseudoFuN_app')
rsconnect::deployApp('~/Desktop/NAR_2018/PseudoFuN_app')
rsconnect::setAccountInfo(name='integrativeomics',
token='42D566E788C0194A4F77BD5B0B43116B',
secret='QQii6z+g/ce8LfDyjjsH/jLPENLxK0sOKiMLIbOt')
rsconnect::deployApp('~/Desktop/NAR_2018/PseudoFuN_app')
options(repos = BiocInstaller::biocinstallRepos())
rsconnect::deployApp('~/Desktop/NAR_2018/PseudoFuN_app')
runApp()
rsconnect::deployApp('~/Desktop/NAR_2018/PseudoFuN_app')
runApp()
rsconnect::deployApp('~/Desktop/NAR_2018/PseudoFuN_app')
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp('~/Desktop/NAR_2018/PseudoFuN_app')
runApp()
