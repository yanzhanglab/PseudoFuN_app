i <<- 0;
intersections(A,B,C)
class(A) == 'list'
class(A) == "list"
intersections <- function(...){
i <<- i + 1;
message(i)
tmp = list(...)
message(class(tmp[1]))
message(class(tmp[[1]]))
if (class(tmp[[1]])=='list'){
tmp = tmp[[1]];
}
if (length(tmp)>2){
arg = tmp[[1]];
tmp[[1]] = NULL;
return(intersect(arg,intersections(tmp)))
}
}
i <<- 0;
intersections(A,B,C)
intersect(B,C)
intersect(A,intersect(B,C))
intersections <- function(...){
i <<- i + 1;
message(i)
tmp = list(...)
message(class(tmp[1]))
message(class(tmp[[1]]))
if (class(tmp[[1]])=='list'){
message("convert from list")
tmp = tmp[[1]];
}
if (length(tmp)>=2){
arg = tmp[[1]];
tmp[[1]] = NULL;
return(intersect(arg,intersections(tmp)))
}
}
i <<- 0;
intersections(A,B,C)
intersections <- function(...){
i <<- i + 1;
message(i)
tmp = list(...)
message(class(tmp[1]))
message(class(tmp[[1]]))
if (class(tmp[[1]])=='list'){
message("convert from list")
tmp = tmp[[1]];
}
if (length(tmp)==1){
return(tmp[[1]])
}
arg = tmp[[1]];
tmp[[1]] = NULL;
return(intersect(arg,intersections(tmp)))
}
}
i <<- 0;
intersections(A,B,C)
intersections('blah1','blah2','blah3')
tmp1[[3]] = 'blah4'
tmp1[1]
tmp1[2:3]
unlist(tmp1[2:3])
tmp1[2:]
tmp1[2:end]
tmp1[2:length(tmp1)]
tmp2 = tmp1[2:length(tmp1)]
tmp2
intersections <- function(...){
i <<- i + 1;
message(i)
tmp = list(...)
message(class(tmp[1]))
message(class(tmp[[1]]))
if (class(tmp[[1]])=='list'){
message("convert from list")
tmp = tmp[[1]];
}
if (length(tmp)==1){
return(tmp[[1]])
}
#arg = tmp[[1]];
#tmp[[1]] = NULL;
#return(intersect(arg,intersections(tmp)))
return(intersect(tmp[[1]],tmp[2:length(tmp)]))
}
}
i <<- 0;
intersections(A,B,C)
intersections <- function(...){
tmp = list(...)
if (class(tmp[[1]])=='list'){
tmp = tmp[[1]];
}
if (length(tmp)==1){
return(tmp[[1]])
}
arg = tmp[[1]];
tmp[[1]] = NULL;
return(intersect(arg,intersections(tmp)))
}
i <<- 0;
intersections(A,B,C)
A = sample(1:100,50,replace=F);
B = sample(1:100,50,replace=F);
C = sample(1:100,50,replace=F);
F = sample(1:100,50,replace=F);
A = sample(1:100,50,replace=F);
B = sample(1:100,50,replace=F);
C = sample(1:100,50,replace=F);
D = sample(1:100,50,replace=F);
E = sample(1:100,50,replace=F);
F = sample(1:100,50,replace=F);
res = intersections(A,B,C,D,E,F);
truth = intersect(A,intersect(B,intersect(C,intersect(D,intersect(E,F)))))
A = sample(1:100,50,replace=F);
F = NULL
A = sample(1:100,50,replace=F);
B = sample(1:100,50,replace=F);
C = sample(1:100,50,replace=F);
D = sample(1:100,50,replace=F);
E = sample(1:100,50,replace=F);
eff = sample(1:100,50,replace=F);
res = intersections(A,B,C,D,E,F);
truth = intersect(A,intersect(B,intersect(C,intersect(D,intersect(E,eff)))))
dB.rdspath = "~/Desktop/NAR_2018/data/dreamBase_rds_pseudo/"
DPgE.rdspath = "~/Desktop/NAR_2018/data/Pseudogene_rds_DGE/"
dB.files = list.files(path = dB.rdspath);
load('~/Desktop/NAR_2018/data/annot.RData')
message('Collecting all pseudogene names')
rnames = c()
for(file in dB.files){
exprP = readRDS(paste0(dB.rdspath,file))
rnames = unique(c(rnames,row.names(exprP)))
}
message('collecting ensembl pseudogene names')
system.time(ensembl.rnames <- mclapply(rnames,function(x) annot[annot$hgnc_symbol==x,'ensembl_transcript_id']))
system.time(ensembl.rnames <- mclapply(ensembl.rnames, function(x) if(identical(x, character(0))) NA else x))
system.time(ensembl.rnames <- mclapply(ensembl.rnames, function(x) paste(x,collapse=",")))
message('collecting and formatting PGG families (Long runtime)')
pg2pgAmat = data.frame(rnames,ensembl.rnames);
for (DB in c("BlastDB","CUDAlign18","CUDAlign54","CUDAlign135","CUDAlign198")){
message(paste0('mapping pseudogenes to ',DB))
load(paste0('~/Desktop/NAR_2018/data/pgAmats_',DB,'.RData'))
system.time(ensembl.rnames.pggfam <- mclapply(ensembl.rnames,function(x) find_pgAmats(strsplit(x,","),dataset)))
system.time(ensembl.rnames.pggfam <- mclapply(ensembl.rnames.pggfam, function(x) if(identical(x, character(0))) NA else x))
system.time(ensembl.rnames.pggfam <- mclapply(ensembl.rnames.pggfam, function(x) paste(x,collapse=",")))
dim(ensembl.rnames.pggfam)
pg2pgAmat[DB] = ensembl.rnames.pggfam;
}
#************************************************************************
# Cleaning all of the data so that there are only gene identifiers
# and no duplicates
cleanDAT <- function(data,seperator,first_col_of_interest,col_per_sample,mult_by,div_by_colsum,start_row){
if(seperator!=""){
data = data[start_row:dim(data)[1],]
names = sub(paste0("[",seperator,"].*"), "", row.names(data));
data = data[,seq(from=first_col_of_interest,to=ncol(data),by=col_per_sample)];
data = as.data.frame(apply(data,2,function(x) as.numeric(as.character(x))*(mult_by/(sum(as.numeric(as.character(x)))^div_by_colsum))))
}else{
data = data[start_row:dim(data)[1],];
names = data[,1];
data = data[,2:ncol(data)];
data = data[,seq(from=first_col_of_interest,to=ncol(data),by=col_per_sample)];
data = as.data.frame(apply(data,2,function(x) as.numeric(as.character(x))*(mult_by/(sum(as.numeric(as.character(x)))^div_by_colsum))))
}
message(length(names))
non_unique = unique(names[duplicated(names)])
message(non_unique);
for (nu in non_unique){
if (nu == "?" || nu=="NA" || nu==""){
message("no keep")
data = data[-c(which(names==nu)),]
names = names[-c(which(names==nu))]
}else{
message("find keep")
idx = which(names==nu);
mns = apply(data[names==nu,],1,function(x) mean(as.numeric(x),na.rm=TRUE))
if(length(unique(mns))==1){
data = data[-c(idx[idx!=idx[1]]),]
names = names[-c(idx[idx!=idx[1]])]
}else{
data = data[-c(idx[which(mns!=max(mns))]),]
names = names[-c(idx[which(mns!=max(mns))])]
}
message(length(names))
}
}
row.names(data) = names;
return(data)
}
in_pgAmat <- function(pgAmat,gene){
if(substr(gene,1,4) == 'ENSG'){
if(gene %in% names(pgAmat)){
return(TRUE)
}else{
return(FALSE)
}
}else if(substr(gene,1,4) == 'ENST'){
if(length(grep(gene,names(pgAmat)))>0){
return(TRUE)
}else{
return(FALSE)
}
}else{
message("Error in query gene")
return(NA)
}
}
find_pgAmats <- function(genes,dataset){
#message('Finding pgAmats containing gene')
tmp = list()
if(all(is.na(genes)==TRUE)){
return(NA)
}else{
for(gene in genes){
tmp[[gene]] = names(dataset)[which(unlist(lapply(dataset,in_pgAmat, gene=gene)))]
}
}
tmp = unlist(tmp)
tmp = unique(tmp)
return(tmp)
}
intersections <- function(...){
tmp = list(...)
if (class(tmp[[1]])=='list'){tmp = tmp[[1]];}
if (length(tmp)==1){return(tmp[[1]])}
arg = tmp[[1]]; tmp[[1]] = NULL;
return(intersect(arg,intersections(tmp)))
}
library(parallel)
library(lme4)
#************************************************************************
# Cleaning all of the data so that there are only gene identifiers
# and no duplicates
cleanDAT <- function(data,seperator,first_col_of_interest,col_per_sample,mult_by,div_by_colsum,start_row){
if(seperator!=""){
data = data[start_row:dim(data)[1],]
names = sub(paste0("[",seperator,"].*"), "", row.names(data));
data = data[,seq(from=first_col_of_interest,to=ncol(data),by=col_per_sample)];
data = as.data.frame(apply(data,2,function(x) as.numeric(as.character(x))*(mult_by/(sum(as.numeric(as.character(x)))^div_by_colsum))))
}else{
data = data[start_row:dim(data)[1],];
names = data[,1];
data = data[,2:ncol(data)];
data = data[,seq(from=first_col_of_interest,to=ncol(data),by=col_per_sample)];
data = as.data.frame(apply(data,2,function(x) as.numeric(as.character(x))*(mult_by/(sum(as.numeric(as.character(x)))^div_by_colsum))))
}
message(length(names))
non_unique = unique(names[duplicated(names)])
message(non_unique);
for (nu in non_unique){
if (nu == "?" || nu=="NA" || nu==""){
message("no keep")
data = data[-c(which(names==nu)),]
names = names[-c(which(names==nu))]
}else{
message("find keep")
idx = which(names==nu);
mns = apply(data[names==nu,],1,function(x) mean(as.numeric(x),na.rm=TRUE))
if(length(unique(mns))==1){
data = data[-c(idx[idx!=idx[1]]),]
names = names[-c(idx[idx!=idx[1]])]
}else{
data = data[-c(idx[which(mns!=max(mns))]),]
names = names[-c(idx[which(mns!=max(mns))])]
}
message(length(names))
}
}
row.names(data) = names;
return(data)
}
in_pgAmat <- function(pgAmat,gene){
if(substr(gene,1,4) == 'ENSG'){
if(gene %in% names(pgAmat)){
return(TRUE)
}else{
return(FALSE)
}
}else if(substr(gene,1,4) == 'ENST'){
if(length(grep(gene,names(pgAmat)))>0){
return(TRUE)
}else{
return(FALSE)
}
}else{
message("Error in query gene")
return(NA)
}
}
find_pgAmats <- function(genes,dataset){
#message('Finding pgAmats containing gene')
tmp = list()
if(all(is.na(genes)==TRUE)){
return(NA)
}else{
for(gene in genes){
tmp[[gene]] = names(dataset)[which(unlist(lapply(dataset,in_pgAmat, gene=gene)))]
}
}
tmp = unlist(tmp)
tmp = unique(tmp)
return(tmp)
}
intersections <- function(...){
tmp = list(...)
if (class(tmp[[1]])=='list'){tmp = tmp[[1]];}
if (length(tmp)==1){return(tmp[[1]])}
arg = tmp[[1]]; tmp[[1]] = NULL;
return(intersect(arg,intersections(tmp)))
}
dB.rdspath = "~/Desktop/NAR_2018/data/dreamBase_rds_pseudo/"
DPgE.rdspath = "~/Desktop/NAR_2018/data/Pseudogene_rds_DGE/"
dB.files = list.files(path = dB.rdspath);
load('~/Desktop/NAR_2018/data/annot.RData')
message('Collecting all pseudogene names')
rnames = c()
for(file in dB.files){
exprP = readRDS(paste0(dB.rdspath,file))
rnames = unique(c(rnames,row.names(exprP)))
}
message('collecting ensembl pseudogene names')
system.time(ensembl.rnames <- mclapply(rnames,function(x) annot[annot$hgnc_symbol==x,'ensembl_transcript_id']))
system.time(ensembl.rnames <- mclapply(ensembl.rnames, function(x) if(identical(x, character(0))) NA else x))
system.time(ensembl.rnames <- mclapply(ensembl.rnames, function(x) paste(x,collapse=",")))
message('collecting and formatting PGG families (Long runtime)')
pg2pgAmat = data.frame(rnames,ensembl.rnames);
for (DB in c("BlastDB","CUDAlign18","CUDAlign54","CUDAlign135","CUDAlign198")){
message(paste0('mapping pseudogenes to ',DB))
load(paste0('~/Desktop/NAR_2018/data/pgAmats_',DB,'.RData'))
system.time(ensembl.rnames.pggfam <- mclapply(ensembl.rnames,function(x) find_pgAmats(strsplit(x,","),dataset)))
system.time(ensembl.rnames.pggfam <- mclapply(ensembl.rnames.pggfam, function(x) if(identical(x, character(0))) NA else x))
system.time(ensembl.rnames.pggfam <- mclapply(ensembl.rnames.pggfam, function(x) paste(x,collapse=",")))
dim(ensembl.rnames.pggfam)
pg2pgAmat[DB] = ensembl.rnames.pggfam;
}
library(parallel)
library(lme4)
#************************************************************************
# Cleaning all of the data so that there are only gene identifiers
# and no duplicates
cleanDAT <- function(data,seperator,first_col_of_interest,col_per_sample,mult_by,div_by_colsum,start_row){
if(seperator!=""){
data = data[start_row:dim(data)[1],]
names = sub(paste0("[",seperator,"].*"), "", row.names(data));
data = data[,seq(from=first_col_of_interest,to=ncol(data),by=col_per_sample)];
data = as.data.frame(apply(data,2,function(x) as.numeric(as.character(x))*(mult_by/(sum(as.numeric(as.character(x)))^div_by_colsum))))
}else{
data = data[start_row:dim(data)[1],];
names = data[,1];
data = data[,2:ncol(data)];
data = data[,seq(from=first_col_of_interest,to=ncol(data),by=col_per_sample)];
data = as.data.frame(apply(data,2,function(x) as.numeric(as.character(x))*(mult_by/(sum(as.numeric(as.character(x)))^div_by_colsum))))
}
message(length(names))
non_unique = unique(names[duplicated(names)])
message(non_unique);
for (nu in non_unique){
if (nu == "?" || nu=="NA" || nu==""){
message("no keep")
data = data[-c(which(names==nu)),]
names = names[-c(which(names==nu))]
}else{
message("find keep")
idx = which(names==nu);
mns = apply(data[names==nu,],1,function(x) mean(as.numeric(x),na.rm=TRUE))
if(length(unique(mns))==1){
data = data[-c(idx[idx!=idx[1]]),]
names = names[-c(idx[idx!=idx[1]])]
}else{
data = data[-c(idx[which(mns!=max(mns))]),]
names = names[-c(idx[which(mns!=max(mns))])]
}
message(length(names))
}
}
row.names(data) = names;
return(data)
}
in_pgAmat <- function(pgAmat,gene){
if(substr(gene,1,4) == 'ENSG'){
if(gene %in% names(pgAmat)){
return(TRUE)
}else{
return(FALSE)
}
}else if(substr(gene,1,4) == 'ENST'){
if(length(grep(gene,names(pgAmat)))>0){
return(TRUE)
}else{
return(FALSE)
}
}else{
message("Error in query gene")
return(NA)
}
}
find_pgAmats <- function(genes,dataset){
#message('Finding pgAmats containing gene')
tmp = list()
if(all(is.na(genes)==TRUE)){
return(NA)
}else{
for(gene in genes){
tmp[[gene]] = names(dataset)[which(unlist(lapply(dataset,in_pgAmat, gene=gene)))]
}
}
tmp = unlist(tmp)
tmp = unique(tmp)
return(tmp)
}
intersections <- function(...){
tmp = list(...)
if (class(tmp[[1]])=='list'){tmp = tmp[[1]];}
if (length(tmp)==1){return(tmp[[1]])}
arg = tmp[[1]]; tmp[[1]] = NULL;
return(intersect(arg,intersections(tmp)))
}
dB.rdspath = "~/Desktop/NAR_2018/data/dreamBase_rds_pseudo/"
DPgE.rdspath = "~/Desktop/NAR_2018/data/Pseudogene_rds_DGE/"
dB.files = list.files(path = dB.rdspath);
load('~/Desktop/NAR_2018/data/annot.RData')
message('Collecting all pseudogene names')
rnames = c()
for(file in dB.files){
exprP = readRDS(paste0(dB.rdspath,file))
rnames = unique(c(rnames,row.names(exprP)))
}
message('collecting ensembl pseudogene names')
system.time(ensembl.rnames <- mclapply(rnames,function(x) annot[annot$hgnc_symbol==x,'ensembl_transcript_id']))
ensembl.rnames[2]
ensembl.rnames[1]
system.time(ensembl.rnames <- mclapply(ensembl.rnames, function(x) if(identical(x, character(0))) NA else x))
system.time(ensembl.rnames <- mclapply(ensembl.rnames, function(x) paste(x,collapse=",")))
ensembl.rnames[2]
message('collecting and formatting PGG families (Long runtime)')
pg2pgAmat = data.frame(rnames,ensembl.rnames);
pg2pgAmat = data.frame(rnames);
pg2pgAmat$ensembl.rnames = ensembl.rnames
pg2pgAmat['ensembl.rnames'] = ensembl.rnames
pg2pgAmat = data.frame(rnames);
pg2pgAmat[,'ensembl.rnames'] = ensembl.rnames
pg2pgAmat = data.frame(rnames);
pg2pgAmat = data.frame(rnames);
pg2pgAmat[['ensembl.rnames']] = ensembl.rnames
for (DB in c("BlastDB","CUDAlign18","CUDAlign54","CUDAlign135","CUDAlign198")){
message(paste0('mapping pseudogenes to ',DB))
load(paste0('~/Desktop/NAR_2018/data/pgAmats_',DB,'.RData'))
system.time(ensembl.rnames.pggfam <- mclapply(ensembl.rnames,function(x) find_pgAmats(strsplit(x,","),dataset)))
system.time(ensembl.rnames.pggfam <- mclapply(ensembl.rnames.pggfam, function(x) if(identical(x, character(0))) NA else x))
system.time(ensembl.rnames.pggfam <- mclapply(ensembl.rnames.pggfam, function(x) paste(x,collapse=",")))
dim(ensembl.rnames.pggfam)
pg2pgAmat[[DB]] = ensembl.rnames.pggfam;
}
View(pg2pgAmat)
find_pgAmats(strsplit(ensembl.rnames[2],","),dataset)
find_pgAmats(strsplit(unlist(ensembl.rnames[2]),","),dataset)
find_pgAmats(strsplit(unlist(ensembl.rnames[3]),","),dataset)
message('collecting and formatting PGG families (Long runtime)')
pg2pgAmat = data.frame(rnames);
pg2pgAmat[['ensembl.rnames']] = ensembl.rnames
for (DB in c("BlastDB","CUDAlign18","CUDAlign54","CUDAlign135","CUDAlign198")){
message(paste0('mapping pseudogenes to ',DB))
load(paste0('~/Desktop/NAR_2018/data/pgAmats_',DB,'.RData'))
system.time(ensembl.rnames.pggfam <- mclapply(ensembl.rnames,function(x) find_pgAmats(strsplit(unlist(x),","),dataset)))
system.time(ensembl.rnames.pggfam <- mclapply(ensembl.rnames.pggfam, function(x) if(identical(x, character(0))) NA else x))
system.time(ensembl.rnames.pggfam <- mclapply(ensembl.rnames.pggfam, function(x) paste(x,collapse=",")))
dim(ensembl.rnames.pggfam)
pg2pgAmat[[DB]] = ensembl.rnames.pggfam;
}
View(pg2pgAmat)
message('collecting and formatting PGG families (Long runtime)')
pg2pgAmat = data.frame(rnames);
pg2pgAmat[['ensembl.rnames']] = ensembl.rnames
for (DB in c("BlastDB","CUDAlign18","CUDAlign54","CUDAlign135","CUDAlign198")){
message(paste0('mapping pseudogenes to ',DB))
load(paste0('~/Desktop/NAR_2018/data/pgAmats_',DB,'.RData'))
system.time(ensembl.rnames.pggfam <- mclapply(ensembl.rnames,function(x) find_pgAmats(strsplit(unlist(x),","),dataset)))
#system.time(ensembl.rnames.pggfam <- mclapply(ensembl.rnames.pggfam, function(x) if(identical(x, character(0))) NA else x))
#system.time(ensembl.rnames.pggfam <- mclapply(ensembl.rnames.pggfam, function(x) paste(x,collapse=",")))
message(length(ensembl.rnames.pggfam))
pg2pgAmat[[DB]] = ensembl.rnames.pggfam;
}
View(pg2pgAmat)
find_pgAmats(strsplit(unlist(ensembl.rnames[1]),","),dataset))
find_pgAmats(strsplit(unlist(ensembl.rnames[1]),","),dataset)
shiny::runApp('~/Desktop/NAR_2018/PseudoFuN_app')
runApp('~/Desktop/NAR_2018/PseudoFuN_app')
options(repos = BiocInstaller::biocinstallRepos(),rsconnect.max.bundle.size = 3145728000)
rsconnect::setAccountInfo(name='integrativeomics',
token='42D566E788C0194A4F77BD5B0B43116B',
secret='QQii6z+g/ce8LfDyjjsH/jLPENLxK0sOKiMLIbOt')
rsconnect::deployApp(server="shinyapps.io")
rsconnect::deployApp(server="shinyapps.io")
options(repos = BiocInstaller::biocinstallRepos(),rsconnect.max.bundle.size = 3145728000)
rsconnect::setAccountInfo(name='integrativeomics',
token='42D566E788C0194A4F77BD5B0B43116B',
secret='QQii6z+g/ce8LfDyjjsH/jLPENLxK0sOKiMLIbOt')
rsconnect::deployApp(server="shinyapps.io")
setwd('~/Desktop/NAR_2018/PseudoFuN_app')
options(repos = BiocInstaller::biocinstallRepos(),rsconnect.max.bundle.size = 3145728000)
rsconnect::setAccountInfo(name='integrativeomics',
token='42D566E788C0194A4F77BD5B0B43116B',
secret='QQii6z+g/ce8LfDyjjsH/jLPENLxK0sOKiMLIbOt')
rsconnect::deployApp(server="shinyapps.io")
rsconnect::deployApp(server="shinyapps.io")
61765-173
61786+173
