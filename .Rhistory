image_features=vector()
image_features <- unique(image_features)
image_features
image_features=vector()
image_features
protein_genes = c( "AR-R-V", "PTEN-R-V", "Bcl-2-M-V")
protein_genes
t <- try(protein <- DB[["Protein"]][protein_genes,ordered_samples,drop=FALSE])
protein
protein <- t(apply(protein, 1, scale))
colnames(protein) <- ordered_samples
protein <- melt(protein)
protein$Var1
protein[["Var2"]] <- factor(protein[["Var2"]], levels=ordered_samples, ordered = TRUE)
protein[["Var1"]] <- factor(protein[["Var1"]], levels=protein_genes, ordered = TRUE)
protein$Var1
protein_genes
# plot both epithelial expression and stroma expression
protein_genes = rev(protein_genes) # This is for descending order of names in y axis
t <- try(protein <- DB[["Protein"]][protein_genes,ordered_samples,drop=FALSE])
protein <- t(apply(protein, 1, scale))
colnames(protein) <- ordered_samples
protein <- melt(protein)
protein[["Var2"]] <- factor(protein[["Var2"]], levels=ordered_samples, ordered = TRUE)
protein[["Var1"]] <- factor(protein[["Var1"]], levels=protein_genes, ordered = TRUE)
protein$Var1
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1)) +
guides(fill = guide_colorbar(barwidth = 10, barheight = 1), direction = "vertical")
levels(protein_genes$Var1)
protein_genes$Var1$levels
level(protein_genes$Var1)
level(protein_genes)
level(protein$Var1)
levels(protein$Var1)
print(levels(protein$Var1))
runApp('Desktop/iGenomicsR_no_image_data')
runApp('Desktop/iGenomicsR_no_image_data')
protein_genes
protein_genes = c(  "AR-R-V", "Bcl-2-M-V", "PTEN-R-V")
protein_genes
# plot both epithelial expression and stroma expression
protein_genes = rev(protein_genes) # This is for descending order of names in y axis
protein_genes
t <- try(protein <- DB[["Protein"]][protein_genes,ordered_samples,drop=FALSE])
res[["protein_data"]] <- t(protein)
protein <- t(apply(protein, 1, scale))
colnames(protein) <- ordered_samples
protein <- melt(protein)
protein[["Var2"]] <- factor(protein[["Var2"]], levels=ordered_samples, ordered = TRUE)
protein[["Var1"]] <- factor(protein[["Var1"]], levels=protein_genes, ordered = TRUE)
print("levels: (order from bottom to top in plot.")
print(levels(protein$Var1))
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1)) +
guides(fill = guide_colorbar(barwidth = 10, barheight = 1), direction = "vertical")
runApp('Desktop/iGenomicsR_no_image_data')
#source("https://bioconductor.org/biocLite.R")
# biocLite("DESeq2")
library(DESeq2)
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library(DESeq2)
options(stringsAsFactors = FALSE)
KIRC_coxnnet = read.csv("~/Documents/deseq2/log_counts.csv",header=FALSE)
raw = read.csv(file="~/Documents/deseq2/gdac.broadinstitute.org_KIRC.Merge_rnaseq__illuminahiseq_rnaseq__unc_edu__Level_3__gene_expression__data.Level_3.2016012800.0.0/KIRC.rnaseq__illuminahiseq_rnaseq__unc_edu__Level_3__gene_expression__data.data.txt",
header=T, sep="\t")
raw_counts = raw[2:dim(raw)[1], raw[1,] == "raw_counts"]
# set row names as gene name
rownames(raw_counts)<-raw[2:dim(raw)[1], raw[1,] == "gene"]
raw_counts = lapply(raw_counts, as.numeric)
raw_counts = data.frame(raw_counts)
## Create a coldata frame and instantiate the DESeqDataSet. See ?DESeqDataSetFromMatrix
condition<- factor(rep("kidneyCancerExpr",537))
coldata <- data.frame(row.names=colnames(raw_counts), condition)
# design=~1 means no design
dds <- DESeqDataSetFromMatrix(countData=raw_counts, colData=coldata, design=~1)
dds <- estimateSizeFactors( dds )
#log transform
logcounts <- log2( counts(dds, normalized=TRUE)+1)
write.csv(logcounts,file = "~/Documents/deseq2/logcounts_kidneyCancer.csv",quote = F,col.names = T,row.names = F)
KIRC_coxnnet = read.csv("~/Documents/deseq2/log_counts.csv",header=FALSE)
dim(logcounts)
raw_counts = raw[2:dim(raw)[1], raw[1,] == "raw_counts"]
# set row names as gene name
rownames(raw_counts)<-raw[2:dim(raw)[1], raw[1,] == "gene"]
raw_counts = lapply(raw_counts, as.numeric)
raw_counts = data.frame(raw_counts)
raw[1,]
raw[1,] == "gene"
raw[1,] == "gene"
raw[1,1:4]
rownames(raw_counts)
raw[1:5,1:5]
2:dim(raw)[1]
raw[2:10,1]
raw[2:10,1raw[2:dim(raw)[1], 1]]
raw[2:dim(raw)[1], 1]
raw[1:5, 1]
rownames(raw_counts)<-raw[2:dim(raw)[1], 1]
rownames(raw_counts)
condition<- factor(rep("kidneyCancerExpr",537))
coldata <- data.frame(row.names=colnames(raw_counts), condition)
dds <- DESeqDataSetFromMatrix(countData=raw_counts, colData=coldata, design=~1)
dds = dds[rowSums(counts(dds))>5,]
dds = dds[rowSums(counts(dds))>10,]
dds = dds[rowSums(counts(dds))>100,]
dds = dds[rowSums(counts(dds))>200,]
dds = dds[rowSums(counts(dds))>250,]
dds = dds[rowSums(counts(dds))>255,]
dds = dds[rowSums(counts(dds))>280,]
dds = dds[rowSums(counts(dds))>300,]
dds = dds[rowSums(counts(dds))>350,]
# design=~1 means no design
dds <- DESeqDataSetFromMatrix(countData=raw_counts, colData=coldata, design=~1)
dds = dds[rowSums(counts(dds))>350,]
dds = dds[rowSums(counts(dds))>351,]
dds = dds[rowSums(counts(dds))>352,]
# design=~1 means no design
dds <- DESeqDataSetFromMatrix(countData=raw_counts, colData=coldata, design=~1)
dds <- estimateSizeFactors( dds )
#log transform
logcounts <- log2( counts(dds, normalized=TRUE)+1)
hist(KIRC_coxnnet)
range(KIRC_coxnnet)
hist(KIRC_coxnnet)
hist(logcounts)
#log transform
logcounts <- log2( counts(dds, normalized=TRUE))
hist(logcounts)
scale(logcounts)
range(logcounts)
#log transform
logcounts <- log2( counts(dds, normalized=TRUE)+0.01)
hist(logcounts)
#log transform
logcounts <- loge( counts(dds, normalized=TRUE)+0.0001)
#log transform
logcounts <- log( counts(dds, normalized=TRUE)+0.0001)
hist(logcounts)
#log transform
logcounts <- log10( counts(dds, normalized=TRUE)+0.0001)
hist(logcounts)
#log transform
logcounts <- log2( counts(dds, normalized=TRUE)+0.0001)
hist(logcounts)
#log transform
logcounts <- log2( counts(dds, normalized=TRUE)+1)
hist(logcounts)
logcounts.scale <- scale(logcounts) # standardize to zero mean and unit std
hist(logcounts.scale)
mean(logcounts.scale)
std(logcounts.scale)
write.csv(logcounts,file = "~/Documents/deseq2/logcounts_kidneyCancer.csv",quote = F,col.names = T,row.names = F)
hist(as.matrix(KIRC_coxnnet))
hist(logcounts)
rownames(logcounts.scale)
write.csv(logcounts,file = "~/Documents/deseq2/logcounts_kidneyCancer.csv",quote = F,col.names = T,row.names = T)
shiny::runApp('Desktop/PseudoFuN_app')
load("/Users/zhi/Desktop/g.Rdata")
g
g$nodes
g$nodes$name
"Pseudogene: C1GALT1P1: ENST00000548895.1" %in% g$nodes$name
match("Gene: C1GALT1C1: ENSG00000171155", g$nodes$name)
match("ENSG00000171155", g$nodes$name)
sub(".*:", "", "ENSG00000171155")
sub(".*:", "", g$nodes$name)
sub(".*: ", "", g$nodes$name)
length(g)
length(g$nodes)
length(g$nodes$name)
1:length(g$nodes$name)
rep(1:length(g$nodes$name))
rep(1,length(g$nodes$name))
runApp('Desktop/PseudoFuN_app')
g$nodes
runApp('Desktop/PseudoFuN_app')
runApp('Desktop/PseudoFuN_app')
runApp('Desktop/PseudoFuN_app')
g$links
runApp('Desktop/PseudoFuN_app')
library(colourpicker)
runApp('Desktop/PseudoFuN_app')
runApp('Desktop/PseudoFuN_app')
setwd("~/Desktop/PseudoFuN_app/")
# import hg19 and hg38
load("./data/UCSC_hg19_refGene_20180330.Rdata") # varname: hg19
load("./data/UCSC_hg38_refGene_20180330.Rdata") # varname: hg38
hg19 <- data.frame(cbind(rownames(hg19), hg19, hg19[6]-hg19[5]))
hg38 <- data.frame(cbind(rownames(hg38), hg38, hg38[6]-hg38[5]))
colnames(hg38) = c("id","","name","chrom","strand","txStart","txEnd","cdsStart","cdsEnd","exonCount","exonStarts","exonEnds","proteinID","alignID","","","","length")
colnames(hg19) = c("id","","name","chrom","strand","txStart","txEnd","cdsStart","cdsEnd","exonCount","exonStarts","exonEnds","proteinID","alignID","","","","length")
library(circlize)
library(openxlsx)
colnames(hg38) = c("id","","name","chrom","strand","txStart","txEnd","cdsStart","cdsEnd","exonCount","exonStarts","exonEnds","proteinID","alignID","","","","length")
colnames(hg19) = c("id","","name","chrom","strand","txStart","txEnd","cdsStart","cdsEnd","exonCount","exonStarts","exonEnds","proteinID","alignID","","","","length")
hg19.ring <- hg19[!grepl("_", hg19$chrom),] # remove undefined chromosome
hg38.ring <- hg38[!grepl("_", hg38$chrom),]
hg19.ring <- hg19.ring[!grepl("chrM", hg19.ring$chrom),]
hg38.ring <- hg38.ring[!grepl("chrM", hg38.ring$chrom),]
hg19.matched <- hg19.ring[match(genes_str, hg19.ring$alignID, nomatch = 0), ]
hg38.matched <- hg38.ring[match(genes_str, hg38.ring$alignID, nomatch = 0), ]
genes_str <- c("LOC102725121", "FAM138A", "RIMS2", "LINC01128", "MMP23A", "ULK4P1")
hg19.matched <- hg19.ring[match(genes_str, hg19.ring$alignID, nomatch = 0), ]
hg38.matched <- hg38.ring[match(genes_str, hg38.ring$alignID, nomatch = 0), ]
hg19.ring.lengthsum <- aggregate(hg19.ring["length"],hg19.ring["chrom"],sum)
hg38.ring.lengthsum <- aggregate(hg38.ring["length"],hg38.ring["chrom"],sum)
factors_count = as.data.frame(hg38.ring.lengthsum)
factors = factor(factors_count[,1], levels = factors_count[,1])
xlim = cbind(rep(0, dim(factors_count)[1]), factors_count[,2])
rownames(xlim) = factors_count[,1]
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
BED.data$txStart <- as.numeric(sub('.*\\:', '', data$Location ))
data
observeEvent({input$button_circos,
load("./data/UCSC_hg19_refGene_20180330.Rdata") # varname: hg19
load("./data/UCSC_hg38_refGene_20180330.Rdata") # varname: hg38
# genes_str <- c("LOC102725121", "FAM138A", "RIMS2", "LINC01128", "MMP23A", "ULK4P1")
hg19 <- data.frame(cbind(rownames(hg19), hg19, hg19[6]-hg19[5]))
hg38 <- data.frame(cbind(rownames(hg38), hg38, hg38[6]-hg38[5]))
colnames(hg38) = c("id","","name","chrom","strand","txStart","txEnd","cdsStart","cdsEnd","exonCount","exonStarts","exonEnds","proteinID","alignID","","","","length")
colnames(hg19) = c("id","","name","chrom","strand","txStart","txEnd","cdsStart","cdsEnd","exonCount","exonStarts","exonEnds","proteinID","alignID","","","","length")
hg19.ring <- hg19[!grepl("_", hg19$chrom),] # remove undefined chromosome
hg38.ring <- hg38[!grepl("_", hg38$chrom),]
hg19.ring <- hg19.ring[!grepl("chrM", hg19.ring$chrom),]
hg38.ring <- hg38.ring[!grepl("chrM", hg38.ring$chrom),]
hg19.matched <- hg19.ring[match(genes_str, hg19.ring$alignID, nomatch = 0), ]
hg38.matched <- hg38.ring[match(genes_str, hg38.ring$alignID, nomatch = 0), ]
hg19.ring.lengthsum <- aggregate(hg19.ring["length"],hg19.ring["chrom"],sum)
hg38.ring.lengthsum <- aggregate(hg38.ring["length"],hg38.ring["chrom"],sum)
output$circos_plot_ui_hg38 <- renderUI({
plotOutput("circos_plot_component_hg38", width = input$circos_param_size, height = input$circos_param_size)
})
output$circos_plot_ui_hg19 <- renderUI({
plotOutput("circos_plot_component_hg19", width = input$circos_param_size, height = input$circos_param_size)
})
output$circos_plot_component_hg38 <- renderPlot({
factors_count = as.data.frame(hg38.ring.lengthsum)
factors = factor(factors_count[,1], levels = factors_count[,1])
xlim = cbind(rep(0, dim(factors_count)[1]), factors_count[,2])
rownames(xlim) = factors_count[,1]
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
circlizeGenomics(BED.data, factors, xlim, mySpecies="hg38", myTitle = "Human Genome (GRCh38/hg38)",
input$circos_param_size,
input$circos_param_genelink,
input$circos_param_genesymbol)
})
output$circos_plot_component_hg19 <- renderPlot({
factors_count = as.data.frame(hg19.ring.lengthsum)
factors = factor(factors_count[,1], levels = factors_count[,1])
xlim = cbind(rep(0, dim(factors_count)[1]), factors_count[,2])
rownames(xlim) = factors_count[,1]
BED.data <- data.frame(hg19.matched[,c(4,6:7,10,14)])
circlizeGenomics(BED.data, factors, xlim, mySpecies="hg19", myTitle = "Human Genome (GRCh37/hg19)",
input$circos_param_size,
input$circos_param_genelink,
input$circos_param_genesymbol)
})
removeModal()
})
# Define server logic required to draw a histogram ----
function(input, output, session) {
num_tabs <<- 0
tabs.list <<- NULL
load("./data/annot.Rdata")
annot <<- annot
observeEvent(input$action1, {
dataset <<- load_dataset(input$db)
if (length(tabs.list) > 0){
for (i in 1:length(tabs.list)){
print("remove tabs")
print(tabs.list[i])
removeTab(inputId = "tabs", target = tabs.list[i])
}
tabs.list <<- NULL
}
print("rendering network panels...")
smartModal(error=F, title = "Processing", content = "We are processing your request ...")
t <- try(num_tabs <<- num_networks(input$gene,input$isgene,dataset,annot))
if("try-error" %in% class(t)) {
removeModal()
print("Error occured")
print(dataset)
smartModal(error=T, title = "Error occured", content = "Error occured. Try to enter a valid gene.")
return()
}
else{
if (input$go > 0){
removeModal()
smartModal(error=F, title = "Processing", content = "We are processing your GO analysis (may take a few minutes)")
GOanalysis <- search2GOtbl(input$gene,input$isgene,input$go,dataset,annot,input$inc0,
input$run.ks, input$run.ks.elim)
removeModal()
output$GOtable <- DT::renderDataTable({
GOanalysis
},selection="none",options=list(searching=F, ordering=F))#,extensions = 'Responsive'
output$download_go <- downloadHandler(
filename = function() {
name = "GO_result.csv"
},
content = function(file) {
write.table(GOanalysis, file = file, append = FALSE, quote = TRUE, sep = ',',
eol = "\r\n", na = "NA", dec = ".", row.names = F,
col.names = T, qmethod = c("escape", "double"),
fileEncoding = "")
})
session$sendCustomMessage("download_go","-")
}
for (i in 1:num_tabs){
# print(i)
tabs.list <<- c(tabs.list, paste0('Network ',i))
appendTab(inputId = "tabs",
tab = tabPanel(paste0('Network ',i),
h2(paste0('Network ',i), style="color: STEELBLUE; font-size: 22px"),
forceNetworkOutput(paste0('net',i)))
)
}
removeModal()
Map(function(i) {
print(paste0('net',i))
output[[paste0('net',i)]] <- renderForceNetwork({
print("render force map")
smartModal(error=F, title = "Processing", content = "Initializing Force Directed Networks ...")
t2 <- try(g <- search2network(input$gene,input$isgene,dataset,annot,i))
if("try-error" %in% class(t2)) {
removeModal()
print("Error occured")
smartModal(error=T, title = "Error occured", content = "Searching Network Failed. Try to enter a valid gene.")
return()
}
removeModal()
targetposition = match(input$gene, sub(".*: ", "", g$nodes$name))
nodesize = rep(1,length(g$nodes$name))
nodesize[targetposition] = 50
g$nodes$size = nodesize
forceNetwork(Links = g$links, Nodes=g$nodes,
Source = 'source', Target = 'target', NodeID = 'name',
Nodesize = 'size',
Group = 'group', fontSize = 16,  fontFamily = 'sans')
})
},
1:num_tabs)
}
})
observeEvent({input$button_circos,
load("./data/UCSC_hg19_refGene_20180330.Rdata") # varname: hg19
load("./data/UCSC_hg38_refGene_20180330.Rdata") # varname: hg38
# genes_str <- c("LOC102725121", "FAM138A", "RIMS2", "LINC01128", "MMP23A", "ULK4P1")
hg19 <- data.frame(cbind(rownames(hg19), hg19, hg19[6]-hg19[5]))
hg38 <- data.frame(cbind(rownames(hg38), hg38, hg38[6]-hg38[5]))
colnames(hg38) = c("id","","name","chrom","strand","txStart","txEnd","cdsStart","cdsEnd","exonCount","exonStarts","exonEnds","proteinID","alignID","","","","length")
colnames(hg19) = c("id","","name","chrom","strand","txStart","txEnd","cdsStart","cdsEnd","exonCount","exonStarts","exonEnds","proteinID","alignID","","","","length")
hg19.ring <- hg19[!grepl("_", hg19$chrom),] # remove undefined chromosome
hg38.ring <- hg38[!grepl("_", hg38$chrom),]
hg19.ring <- hg19.ring[!grepl("chrM", hg19.ring$chrom),]
hg38.ring <- hg38.ring[!grepl("chrM", hg38.ring$chrom),]
hg19.matched <- hg19.ring[match(genes_str, hg19.ring$alignID, nomatch = 0), ]
hg38.matched <- hg38.ring[match(genes_str, hg38.ring$alignID, nomatch = 0), ]
hg19.ring.lengthsum <- aggregate(hg19.ring["length"],hg19.ring["chrom"],sum)
hg38.ring.lengthsum <- aggregate(hg38.ring["length"],hg38.ring["chrom"],sum)
output$circos_plot_ui_hg38 <- renderUI({
plotOutput("circos_plot_component_hg38", width = input$circos_param_size, height = input$circos_param_size)
})
output$circos_plot_ui_hg19 <- renderUI({
plotOutput("circos_plot_component_hg19", width = input$circos_param_size, height = input$circos_param_size)
})
output$circos_plot_component_hg38 <- renderPlot({
factors_count = as.data.frame(hg38.ring.lengthsum)
factors = factor(factors_count[,1], levels = factors_count[,1])
xlim = cbind(rep(0, dim(factors_count)[1]), factors_count[,2])
rownames(xlim) = factors_count[,1]
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
circlizeGenomics(BED.data, factors, xlim, mySpecies="hg38", myTitle = "Human Genome (GRCh38/hg38)",
input$circos_param_size,
input$circos_param_genelink,
input$circos_param_genesymbol)
})
output$circos_plot_component_hg19 <- renderPlot({
factors_count = as.data.frame(hg19.ring.lengthsum)
factors = factor(factors_count[,1], levels = factors_count[,1])
xlim = cbind(rep(0, dim(factors_count)[1]), factors_count[,2])
rownames(xlim) = factors_count[,1]
BED.data <- data.frame(hg19.matched[,c(4,6:7,10,14)])
circlizeGenomics(BED.data, factors, xlim, mySpecies="hg19", myTitle = "Human Genome (GRCh37/hg19)",
input$circos_param_size,
input$circos_param_genelink,
input$circos_param_genesymbol)
})
removeModal()
})
}
observeEvent({input$button_circos,
load("./data/UCSC_hg19_refGene_20180330.Rdata") # varname: hg19
load("./data/UCSC_hg38_refGene_20180330.Rdata") # varname: hg38
# genes_str <- c("LOC102725121", "FAM138A", "RIMS2", "LINC01128", "MMP23A", "ULK4P1")
hg19 <- data.frame(cbind(rownames(hg19), hg19, hg19[6]-hg19[5]))
hg38 <- data.frame(cbind(rownames(hg38), hg38, hg38[6]-hg38[5]))
colnames(hg38) = c("id","","name","chrom","strand","txStart","txEnd","cdsStart","cdsEnd","exonCount","exonStarts","exonEnds","proteinID","alignID","","","","length")
colnames(hg19) = c("id","","name","chrom","strand","txStart","txEnd","cdsStart","cdsEnd","exonCount","exonStarts","exonEnds","proteinID","alignID","","","","length")
hg19.ring <- hg19[!grepl("_", hg19$chrom),] # remove undefined chromosome
hg38.ring <- hg38[!grepl("_", hg38$chrom),]
hg19.ring <- hg19.ring[!grepl("chrM", hg19.ring$chrom),]
hg38.ring <- hg38.ring[!grepl("chrM", hg38.ring$chrom),]
hg19.matched <- hg19.ring[match(genes_str, hg19.ring$alignID, nomatch = 0), ]
hg38.matched <- hg38.ring[match(genes_str, hg38.ring$alignID, nomatch = 0), ]
hg19.ring.lengthsum <- aggregate(hg19.ring["length"],hg19.ring["chrom"],sum)
hg38.ring.lengthsum <- aggregate(hg38.ring["length"],hg38.ring["chrom"],sum)
output$circos_plot_ui_hg38 <- renderUI({
plotOutput("circos_plot_component_hg38", width = input$circos_param_size, height = input$circos_param_size)
})
output$circos_plot_ui_hg19 <- renderUI({
plotOutput("circos_plot_component_hg19", width = input$circos_param_size, height = input$circos_param_size)
})
output$circos_plot_component_hg38 <- renderPlot({
factors_count = as.data.frame(hg38.ring.lengthsum)
factors = factor(factors_count[,1], levels = factors_count[,1])
xlim = cbind(rep(0, dim(factors_count)[1]), factors_count[,2])
rownames(xlim) = factors_count[,1]
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
circlizeGenomics(BED.data, factors, xlim, mySpecies="hg38", myTitle = "Human Genome (GRCh38/hg38)",
input$circos_param_size,
input$circos_param_genelink,
input$circos_param_genesymbol)
})
output$circos_plot_component_hg19 <- renderPlot({
factors_count = as.data.frame(hg19.ring.lengthsum)
factors = factor(factors_count[,1], levels = factors_count[,1])
xlim = cbind(rep(0, dim(factors_count)[1]), factors_count[,2])
rownames(xlim) = factors_count[,1]
BED.data <- data.frame(hg19.matched[,c(4,6:7,10,14)])
circlizeGenomics(BED.data, factors, xlim, mySpecies="hg19", myTitle = "Human Genome (GRCh37/hg19)",
input$circos_param_size,
input$circos_param_genelink,
input$circos_param_genesymbol)
})
removeModal()
})
load("./data/UCSC_hg19_refGene_20180330.Rdata") # varname: hg19
load("./data/UCSC_hg38_refGene_20180330.Rdata") # varname: hg38
# genes_str <- c("LOC102725121", "FAM138A", "RIMS2", "LINC01128", "MMP23A", "ULK4P1")
hg19 <- data.frame(cbind(rownames(hg19), hg19, hg19[6]-hg19[5]))
hg38 <- data.frame(cbind(rownames(hg38), hg38, hg38[6]-hg38[5]))
colnames(hg38) = c("id","","name","chrom","strand","txStart","txEnd","cdsStart","cdsEnd","exonCount","exonStarts","exonEnds","proteinID","alignID","","","","length")
colnames(hg19) = c("id","","name","chrom","strand","txStart","txEnd","cdsStart","cdsEnd","exonCount","exonStarts","exonEnds","proteinID","alignID","","","","length")
hg19.ring <- hg19[!grepl("_", hg19$chrom),] # remove undefined chromosome
hg38.ring <- hg38[!grepl("_", hg38$chrom),]
hg19.ring <- hg19.ring[!grepl("chrM", hg19.ring$chrom),]
hg38.ring <- hg38.ring[!grepl("chrM", hg38.ring$chrom),]
hg19.matched <- hg19.ring[match(genes_str, hg19.ring$alignID, nomatch = 0), ]
hg38.matched <- hg38.ring[match(genes_str, hg38.ring$alignID, nomatch = 0), ]
hg19.ring.lengthsum <- aggregate(hg19.ring["length"],hg19.ring["chrom"],sum)
hg38.ring.lengthsum <- aggregate(hg38.ring["length"],hg38.ring["chrom"],sum)
factors_count = as.data.frame(hg38.ring.lengthsum)
factors = factor(factors_count[,1], levels = factors_count[,1])
xlim = cbind(rep(0, dim(factors_count)[1]), factors_count[,2])
rownames(xlim) = factors_count[,1]
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
factors_count = as.data.frame(hg38.ring.lengthsum)
factors = factor(factors_count[,1], levels = factors_count[,1])
xlim = cbind(rep(0, dim(factors_count)[1]), factors_count[,2])
rownames(xlim) = factors_count[,1]
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
circlizeGenomics(BED.data, factors, xlim, mySpecies="hg38", myTitle = "Human Genome (GRCh38/hg38)",
T,T)
source('circos.R')
B
circlizeGenomics(BED.data, factors, xlim, mySpecies="hg38", myTitle = "Human Genome (GRCh38/hg38)",
T,T)
g
sub(".*: ", "", g$nodes$name)
genes_str = sub(".*: ", "", g$nodes$name)
# genes_str <- c("LOC102725121", "FAM138A", "RIMS2", "LINC01128", "MMP23A", "ULK4P1")
hg19 <- data.frame(cbind(rownames(hg19), hg19, hg19[6]-hg19[5]))
hg38 <- data.frame(cbind(rownames(hg38), hg38, hg38[6]-hg38[5]))
colnames(hg38) = c("id","","name","chrom","strand","txStart","txEnd","cdsStart","cdsEnd","exonCount","exonStarts","exonEnds","proteinID","alignID","","","","length")
load("./data/UCSC_hg19_refGene_20180330.Rdata") # varname: hg19
load("./data/UCSC_hg38_refGene_20180330.Rdata") # varname: hg38
genes_str = sub(".*: ", "", g$nodes$name)
# genes_str <- c("LOC102725121", "FAM138A", "RIMS2", "LINC01128", "MMP23A", "ULK4P1")
hg19 <- data.frame(cbind(rownames(hg19), hg19, hg19[6]-hg19[5]))
hg38 <- data.frame(cbind(rownames(hg38), hg38, hg38[6]-hg38[5]))
colnames(hg38) = c("id","","name","chrom","strand","txStart","txEnd","cdsStart","cdsEnd","exonCount","exonStarts","exonEnds","proteinID","alignID","","","","length")
colnames(hg19) = c("id","","name","chrom","strand","txStart","txEnd","cdsStart","cdsEnd","exonCount","exonStarts","exonEnds","proteinID","alignID","","","","length")
hg19.ring <- hg19[!grepl("_", hg19$chrom),] # remove undefined chromosome
hg38.ring <- hg38[!grepl("_", hg38$chrom),]
hg19.ring <- hg19.ring[!grepl("chrM", hg19.ring$chrom),]
hg38.ring <- hg38.ring[!grepl("chrM", hg38.ring$chrom),]
hg19.matched <- hg19.ring[match(genes_str, hg19.ring$alignID, nomatch = 0), ]
hg38.matched <- hg38.ring[match(genes_str, hg38.ring$alignID, nomatch = 0), ]
hg19.ring.lengthsum <- aggregate(hg19.ring["length"],hg19.ring["chrom"],sum)
hg38.ring.lengthsum <- aggregate(hg38.ring["length"],hg38.ring["chrom"],sum)
factors_count = as.data.frame(hg38.ring.lengthsum)
factors = factor(factors_count[,1], levels = factors_count[,1])
xlim = cbind(rep(0, dim(factors_count)[1]), factors_count[,2])
rownames(xlim) = factors_count[,1]
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
circlizeGenomics(BED.data, factors, xlim, mySpecies="hg38", myTitle = "Human Genome (GRCh38/hg38)",
T,T)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
