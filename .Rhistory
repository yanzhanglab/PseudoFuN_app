library(Rtsne)
library(ggplot2)
library(R.matlab)
library(RColorBrewer)
library(fcd) #spectral.clustering
library(gplots) # heatmap.2
library(reshape)
setwd("~/Documents/20180417_Autoencoder/autoencoder/AECOX_test_BRCA/")
options(stringsAsFactors = FALSE)
setwd("/home/zhihuan/Documents/20180417_Autoencoder/autoencoder/AECOX_test_BRCA/")
options(stringsAsFactors = FALSE)
# Original
clinical = read.csv("~/Documents/20180417_Autoencoder/AECOX_experiments/AECOX_test_BRCA/20180526_AECOX_TCGA_BRCA_res/clinical.csv", header=F, sep = ",")
#test
code.with.barcode = read.csv(sprintf("~/Documents/20180417_Autoencoder/AECOX_experiments/AECOX_test_BRCA/20180526_AECOX_TCGA_BRCA_res/test_code_final_dim=16_run_1.csv"), header=F)
# Original
clinical = read.csv("~/Documents/20180417_Autoencoder/AECOX_experiments/AECOX_test_BRCA/20180526_AECOX_TCGA_BRCA_res/clinical.csv", header=F, sep = ",")
colnames(clinical) <- as.character(unlist(clinical[1,]))
clinical = clinical[-1,]
rownames(clinical) <- rep(1:dim(clinical)[1])
barcode = clinical[,1]
OS = as.numeric(as.character(clinical$`Overall Survival (Months)`))
OS.Status = clinical$`Overall Survival Status`
color.vector = OS.Status
color.vector = gsub("LIVING", "slategray1", color.vector)
color.vector.survival = gsub("DECEASED", "red2", color.vector)
print("Importing the code from color_vectraining results...")
code = code.with.barcode[,2:dim(code.with.barcode)[2]]
shuffled.barcode = code.w
ith.barcode[,1]
shuffled.barcode.position = match(shuffled.barcode, barcode)
code.train = code[!is.na(shuffled.barcode.position),]
shuffled.barcode.position.train = shuffled.barcode.position[!is.na(shuffled.barcode.position)]
color.vector.survival.train = color.vector.survival[shuffled.barcode.position.train]
OS.Status.train = OS.Status[shuffled.barcode.position.train]
OS.train = OS[shuffled.barcode.position.train]
OS.train.sorted.idx = sort.int(OS.train,index.return = T)$ix #ascending
colfunc <- colorRampPalette(c("red", "green")) #red: died quick
color.vector.OS.train = colfunc(length(OS.train))[OS.train.sorted.idx]
print(sprintf("dimension of the code %d x %d",dim(code.train)[1],dim(code.train)[2]))
###########################
#       t-SNE PLOT
###########################
# AE + t-SNE
tsne_model = Rtsne(as.matrix(code.train), check_duplicates=FALSE, pca=T, perplexity=30, theta=0.5, dims=2)
d_tsne = as.data.frame(tsne_model$Y)
d_tsne.melt = melt(cbind(OS.Status.train,d_tsne))
justplot <- function(data, color_vec, title = "No title"){
# shape_vec = color_vec
# shape_vec[shape_vec==unique(color_vec)[1]] = 21
# shape_vec[shape_vec==unique(color_vec)[2]] = 23
# shape_vec = as.numeric(shape_vec)
# colnames(data) <- c("V1", "V2")
ggplot(data, aes(x=V1, y=V2, fill=OS.Status.train)) +
geom_point(size=3, colour="black", fill = color_vec, shape=21, stroke = 0.25, aes(x=V1, y=V2, fill=OS.Status.train)) +
guides(colour=guide_legend(override.aes=list(size=6))) +
xlab("dim 1") + ylab("dim 2") +
ggtitle(title) +
theme_light(base_size=14) +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 12),
plot.title = element_text(size=16),
axis.title=element_text(size=14,face="bold"),
axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_colour_brewer(palette = "Set2") +
ggtitle("t-SNE plot") +
labs(fill = "Methods")+
scale_fill_continuous(guide = "legend")
}
justplot(d_tsne, "black", sprintf("OS Event (Red: DECEASE), code: %d x %d", dim(code.train)[1],dim(code.train)[2]))
justplot(d_tsne, color.vector.survival.train, sprintf("OS Event (Red: DECEASE), code: %d x %d", dim(code.train)[1],dim(code.train)[2]))
# justplot(d_tsne, color.vector.OS.train, sprintf("OS time (Red--Green: short--long), code: %d x %d, Cross Validation: %d of 5",dim(code.train)[1],dim(code.train)[2],i))
shiny::runApp('Desktop/iGenomicsR/iGenomicsR_v3')
runApp('Desktop/iGenomicsR/iGenomicsR_v3')
runApp('Desktop/iGenomicsR/iGenomicsR_v3')
runApp('Desktop/iGenomicsR/iGenomicsR_v3')
runApp('Desktop/iGenomicsR_no_image_data')
?Rscript
#Created on 06/04/2018
#Author: Zhi Huang
# install.packages("OIsurv")
library(survival)
library(OIsurv)
library(glmnet)
library(reticulate)
setwd("/home/zhihuan/Documents/20180530_AECOX/experiments/Cox-PH")
source("utils.R")
use_python("/home/zhihuan/anaconda3/bin/python3")
py_load_object <- function(filename, pickle = "pickle") {
builtins <- import_builtins()
pickle <- import(pickle)
handle <- builtins$open(filename, "rb")
on.exit(handle$close(), add = TRUE)
pickle$load(handle)
}
###########################
#    Create Result Dir
###########################
dataset = "kidney_KIRC"
result_dir = paste("/home/zhihuan/Documents/20180530_AECOX/experiments/Cox-PH/Results/",dataset,"/",sep="")
subDir = gsub(" ", "-", gsub("-","",gsub(":",".",Sys.time())))
dir.create(file.path(result_dir), showWarnings = FALSE)
dir.create(file.path(result_dir, subDir), showWarnings = FALSE)
setwd(file.path(result_dir, subDir))
system(paste("python /home/zhihuan/Documents/20180530_AECOX/experiments/Cox-PH/generate_data.py --result_dir ",
result_dir, subDir, " --dataset ", dataset, sep = ""))
set.seed(1)
ptm <- proc.time()
###########################
#    Data and Clinical
###########################
datasets = py_load_object(paste(result_dir, subDir, "/datasets.pickle", sep=""))
x.train = data.matrix(rbind(datasets$train$x, datasets$val$x))
x.test = data.matrix(datasets$test$x)
x.val = data.matrix(datasets$val$x)
OS.train = c(datasets$train$t, datasets$val$t) + 0.000001 # +0.001 to prevent negative event times
OS.test = datasets$test$t + 0.000001
OS.val = datasets$val$t + 0.000001
OS.Status.train = c(datasets$train$e, datasets$val$e)
OS.Status.test = datasets$test$e
OS.Status.val = datasets$val$e
mySurvTrain = Surv(OS.train, OS.Status.train)
cv.fit = cv.glmnet(x.train, mySurvTrain, family = "cox", maxit=50000000)
# C-Index
res = predict(cv.fit, newx = x.train, s = "lambda.min", type="response")
surv.cindex.train <- survConcordance(Surv(OS.train, OS.Status.train) ~ res, data.frame(x.train))
p.train = logrankp(res, OS.train, OS.Status.train, paste(result_dir, subDir, sep=""), "train")
res = predict(cv.fit, newx = x.val, s = "lambda.min", type="response")
surv.cindex.val <- survConcordance(Surv(OS.val, OS.Status.val) ~ res, data.frame(x.val))
p.valid = logrankp(res, OS.val, OS.Status.val, paste(result_dir, subDir, sep=""), "val")
res = predict(cv.fit, newx = x.test, s = "lambda.min", type="response")
surv.cindex.test <- survConcordance(Surv(OS.test, OS.Status.test) ~ res, data.frame(x.test))
p.test = logrankp(res, OS.test, OS.Status.test, paste(result_dir, subDir, sep=""), "test")
print(sprintf("Train: C-index: %f, p-value:%e", surv.cindex.train$concordance, p.train))
print(sprintf("Valid: C-index: %f, p-value:%e", surv.cindex.val$concordance, p.valid))
print(sprintf("Test: C-index: %f, p-value:%e", surv.cindex.test$concordance, p.test))
write(sprintf("Train: C-index: %f, p-value:%e", surv.cindex.train$concordance, p.train),
file = "mainlog.log", append=TRUE)
write(sprintf("Valid: C-index: %f, p-value:%e", surv.cindex.val$concordance, p.valid),
file = "mainlog.log", append=TRUE)
write(sprintf("Test: C-index: %f, p-value:%e", surv.cindex.test$concordance, p.test),
file = "mainlog.log", append=TRUE)
#Created on 06/04/2018
#Author: Zhi Huang
# install.packages("OIsurv")
library(survival)
library(OIsurv)
library(glmnet)
library(reticulate)
setwd("/home/zhihuan/Documents/20180530_AECOX/experiments/Cox-PH")
source("utils.R")
use_python("/home/zhihuan/anaconda3/bin/python3")
py_load_object <- function(filename, pickle = "pickle") {
builtins <- import_builtins()
pickle <- import(pickle)
handle <- builtins$open(filename, "rb")
on.exit(handle$close(), add = TRUE)
pickle$load(handle)
}
###########################
#    Create Result Dir
###########################
dataset = "kidney_KIRC"
result_dir = paste("/home/zhihuan/Documents/20180530_AECOX/experiments/Cox-PH/Results/",dataset,"/",sep="")
subDir = gsub(" ", "-", gsub("-","",gsub(":",".",Sys.time())))
dir.create(file.path(result_dir), showWarnings = FALSE)
dir.create(file.path(result_dir, subDir), showWarnings = FALSE)
setwd(file.path(result_dir, subDir))
system(paste("python /home/zhihuan/Documents/20180530_AECOX/experiments/Cox-PH/generate_data.py --result_dir ",
result_dir, subDir, " --dataset ", dataset, sep = ""))
#Created on 06/04/2018
#Author: Zhi Huang
# install.packages("OIsurv")
library(survival)
library(OIsurv)
library(glmnet)
library(reticulate)
setwd("/home/zhihuan/Documents/20180530_AECOX/experiments/Cox-PH")
source("utils.R")
use_python("/home/zhihuan/anaconda3/bin/python3")
py_load_object <- function(filename, pickle = "pickle") {
builtins <- import_builtins()
pickle <- import(pickle)
handle <- builtins$open(filename, "rb")
on.exit(handle$close(), add = TRUE)
pickle$load(handle)
}
###########################
#    Create Result Dir
###########################
dataset = "kidney_KIRC"
result_dir = paste("/home/zhihuan/Documents/20180530_AECOX/experiments/Cox-PH/Results/",dataset,"/",sep="")
subDir = gsub(" ", "-", gsub("-","",gsub(":",".",Sys.time())))
dir.create(file.path(result_dir), showWarnings = FALSE)
dir.create(file.path(result_dir, subDir), showWarnings = FALSE)
setwd(file.path(result_dir, subDir))
system(paste("python /home/zhihuan/Documents/20180530_AECOX/experiments/Cox-PH/generate_data.py --result_dir ",
result_dir, subDir, " --dataset ", dataset, sep = ""))
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("codetools")
install.packages("foreach")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
# source("https://bioconductor.org/biocLite.R")
# biocLite("DESeq2")
library(DESeq2)
raw = read.csv(file="/home/zhihuan/Desktop/deseq2/gdac.broadinstitute.org_KIRC.Merge_rnaseq__illuminahiseq_rnaseq__unc_edu__Level_3__gene_expression__data.Level_3.2016012800.0.0/KIRC.rnaseq__illuminahiseq_rnaseq__unc_edu__Level_3__gene_expression__data.data.txt",
header=T, sep="\t")
raw(1:10,1:10)
raw[1:10,1:10]
raw[1,] == "raw_counts"
raw_counts = raw[,raw[1,]]
raw_counts = raw$raw[1,]
rc.rows = raw[1,]
raw_counts = raw$rc.rows
rc.rows
length(rc.rows)
rc.rows = raw[1,] == "raw_counts"
rc.rows
sum(rc.rows)
raw_counts = raw[,rc.rows]
raw_counts = raw[, raw[1,] == "raw_counts"]
raw_counts[1:2,1]
raw_counts[1:2,1:2]
raw_counts[1,1:2]
raw_counts[1,]
raw_counts = raw_counts[2:dim(raw_counts)[1],]
head(raw_counts)
View(raw_counts)
library("pasilla")
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
install.packages()
install.packages("pasilla")
biocLite("pasilla")
library("pasilla")
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
head(cts,2)
coldata
rownames(coldata) <- sub("fb", "", rownames(coldata))
all(rownames(coldata) %in% colnames(cts))
all(rownames(coldata) == colnames(cts))
cts <- cts[, rownames(coldata)]
all(rownames(coldata) == colnames(cts))
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds
library(DESeq2)
raw = read.csv(file="/home/zhihuan/Desktop/deseq2/gdac.broadinstitute.org_KIRC.Merge_rnaseq__illuminahiseq_rnaseq__unc_edu__Level_3__gene_expression__data.Level_3.2016012800.0.0/KIRC.rnaseq__illuminahiseq_rnaseq__unc_edu__Level_3__gene_expression__data.data.txt",
header=T, sep="\t")
raw_counts = raw[, raw[1,] == "raw_counts"]
raw_counts = raw_counts[2:dim(raw_counts)[1],]
dds <- estimateSizeFactors(raw_counts)
raw_counts[20532,1]
raw_counts[20532,]
rownames(raw_counts)
raw_counts[,1]
raw_counts[,1]
raw_counts[1:5,1:5]
# source("https://bioconductor.org/biocLite.R")
# biocLite("DESeq2")
library(DESeq2)
options(stringsAsFactors = FALSE)
# KIRC_coxnnet = read.csv("/home/zhihuan/Documents/20180530_AECOX/experiments/cox-nnet/examples/KIRC/log_counts.csv.gz")
raw = read.csv(file="/home/zhihuan/Desktop/deseq2/gdac.broadinstitute.org_KIRC.Merge_rnaseq__illuminahiseq_rnaseq__unc_edu__Level_3__gene_expression__data.Level_3.2016012800.0.0/KIRC.rnaseq__illuminahiseq_rnaseq__unc_edu__Level_3__gene_expression__data.data.txt",
header=T, sep="\t")
raw_counts = raw[2:dim(raw)[1], raw[1,] == "raw_counts"]
# set row names as gene name
rownames(raw_counts)<-raw[2:dim(raw)[1], 1]
raw_counts = lapply(raw_counts, as.numeric)
raw_counts = data.frame(raw_counts)
## Create a coldata frame and instantiate the DESeqDataSet. See ?DESeqDataSetFromMatrix
condition<- factor(rep("CancerExpr",dim(raw_counts)[2]))
coldata <- data.frame(row.names=colnames(raw_counts), condition)
# design=~1 means no design
dds <- DESeqDataSetFromMatrix(countData=raw_counts, colData=coldata, design=~1)
# dds = dds[rowSums(counts(dds))>352,]
dds <- estimateSizeFactors( dds )
#log transform
logcounts <- log2( counts(dds, normalized=TRUE)+1)
hist(logcounts)
logcounts.scale <- scale(logcounts) # standardize to zero mean and unit std
hist(logcounts.scale)
write.csv(logcounts.scale,file = "/home/zhihuan/Desktop/deseq2/logcounts_scaled.csv",quote = F,col.names = T,row.names = T)
colnames(logcounts.scale)
rownames(logcounts.scale)
rownames(dds)
rownames(raw_counts)
raw[2:dim(raw)[1], 1]
# set row names as gene name
raw_counts = lapply(raw_counts, as.numeric)
raw_counts = data.frame(raw_counts)
rownames(raw_counts)<-raw[2:dim(raw)[1], 1]
rownames(raw_counts)
## Create a coldata frame and instantiate the DESeqDataSet. See ?DESeqDataSetFromMatrix
condition<- factor(rep("CancerExpr",dim(raw_counts)[2]))
coldata <- data.frame(row.names=colnames(raw_counts), condition)
# design=~1 means no design
dds <- DESeqDataSetFromMatrix(countData=raw_counts, colData=coldata, design=~1)
dds <- estimateSizeFactors( dds )
#log transform
logcounts <- log2( counts(dds, normalized=TRUE)+1)
hist(logcounts)
logcounts.scale <- scale(logcounts) # standardize to zero mean and unit std
hist(logcounts.scale)
rownames(logcounts.scale)
write.csv(logcounts.scale,file = "/home/zhihuan/Desktop/deseq2/logcounts_scaled.csv",quote = F,col.names = T,row.names = T)
# source("https://bioconductor.org/biocLite.R")
# biocLite("DESeq2")
library(DESeq2)
options(stringsAsFactors = FALSE)
# KIRC_coxnnet = read.csv("/home/zhihuan/Documents/20180530_AECOX/experiments/cox-nnet/examples/KIRC/log_counts.csv.gz")
raw = read.csv(file="/home/zhihuan/Desktop/deseq2/gdac.broadinstitute.org_KIRC.Merge_rnaseq__illuminahiseq_rnaseq__unc_edu__Level_3__gene_expression__data.Level_3.2016012800.0.0/KIRC.rnaseq__illuminahiseq_rnaseq__unc_edu__Level_3__gene_expression__data.data.txt",
header=T, sep="\t")
raw_counts = raw[2:dim(raw)[1], raw[1,] == "raw_counts"]
# set row names as gene name
rownames(raw_counts)<-raw[2:dim(raw)[1], 1]
raw_counts = lapply(raw_counts, as.numeric)
raw_counts = data.frame(raw_counts)
## Create a coldata frame and instantiate the DESeqDataSet. See ?DESeqDataSetFromMatrix
condition<- factor(rep("CancerExpr",dim(raw_counts)[2]))
coldata <- data.frame(row.names=colnames(raw_counts), condition)
# design=~1 means no design
dds <- DESeqDataSetFromMatrix(countData=raw_counts, colData=coldata, design=~1)
# dds = dds[rowSums(counts(dds))>352,]
dds <- estimateSizeFactors( dds )
#log transform
logcounts <- log2( counts(dds, normalized=TRUE)+1)
hist(logcounts)
logcounts.scale <- scale(logcounts) # standardize to zero mean and unit std
hist(logcounts.scale)
write.csv(logcounts.scale[2:dim(logcounts.scale)[1],2:dim(logcounts.scale)[1]],file = "/home/zhihuan/Desktop/deseq2/logcounts_scaled.csv",quote = F,col.names = T,row.names = T)
write.csv(logcounts.scale[2:dim(logcounts.scale)[1],2:dim(logcounts.scale)[2]],file = "/home/zhihuan/Desktop/deseq2/logcounts_scaled.csv",quote = F,col.names = T,row.names = T)
write.csv(logcounts.scale,file = "/home/zhihuan/Desktop/deseq2/logcounts_scaled.csv",quote = F,col.names = F,row.names = F)
write.csv(colnames(logcounts.scale),file = "/home/zhihuan/Desktop/deseq2/logcounts_patients.csv",quote = F,col.names = F,row.names = F)
write.csv(rownames(logcounts.scale),file = "/home/zhihuan/Desktop/deseq2/logcounts_genes.csv",quote = F,col.names = F,row.names = F)
rownames(logcounts.scale)
rownames(raw_counts)
rownames(raw_counts)<-raw[2:dim(raw)[1], 1]
rownames(raw_counts)
write.csv(rownames(raw_counts),file = "/home/zhihuan/Desktop/deseq2/logcounts_genes.csv",quote = F,col.names = F,row.names = F)
write.csv(colnames(logcounts.scale),file = "/home/zhihuan/Desktop/deseq2/logcounts_patients.csv",quote = F)
write.csv(rownames(raw_counts),file = "/home/zhihuan/Desktop/deseq2/logcounts_genes.csv",quote = F)
write.csv(rownames(raw_counts),file = "/home/zhihuan/Desktop/deseq2/logcounts_genes.csv",quote = F,col.names = F,row.names = F)
rownames(raw_counts)[1]
?write.csv
write.csv(logcounts.scale,file = "/home/zhihuan/Desktop/deseq2/logcounts_scaled.csv",col.names = F,row.names = F)
write.csv2(rownames(raw_counts),file = "/home/zhihuan/Desktop/deseq2/logcounts_genes.csv",quote = F,col.names = F,row.names = F)
write.table(rownames(raw_counts),file = "/home/zhihuan/Desktop/deseq2/logcounts_genes.csv",quote = F,col.names = F,row.names = F)
write.table(colnames(logcounts.scale),file = "/home/zhihuan/Desktop/deseq2/logcounts_patients.csv",quote = F,col.names = F,row.names = F)
write.table(logcounts.scale,file = "/home/zhihuan/Desktop/deseq2/logcounts_scaled.csv",col.names = F,row.names = F)
?write.table
write.table(logcounts.scale,file = "/home/zhihuan/Desktop/deseq2/logcounts_scaled.csv", sep = ",", col.names = F,row.names = F)
write.table(colnames(logcounts.scale),file = "/home/zhihuan/Desktop/deseq2/logcounts_patients.csv", sep = ",",quote = F,col.names = F,row.names = F)
write.table(rownames(raw_counts),file = "/home/zhihuan/Desktop/deseq2/logcounts_genes.csv", sep = ",",quote = F,col.names = F,row.names = F)
if(!require(topGO)){
source("https://bioconductor.org/biocLite.R")
biocLite("topGO")
}
if(!require(topGO)){
source("https://bioconductor.org/biocLite.R")
biocLite("topGO")
}
if(!require(org.Hs.eg.db)){
source("https://bioconductor.org/biocLite.R")
biocLite("org.Hs.eg.db")
}
if(!require(BiocGenerics)){
source("https://bioconductor.org/biocLite.R")
biocLite("BiocGenerics")
}
if(!require(biomaRt)){
install.packages('biomaRt')
}
if(!require(igraph)){
install.packages('igraph')
}
if(!require(networkD3)){
install.packages('networkD3')
}
library('biomaRt')
library('igraph')
library('networkD3')
library('topGO')
if(!require(topGO)){
source("https://bioconductor.org/biocLite.R")
biocLite("topGO")
}
if(!require(org.Hs.eg.db)){
source("https://bioconductor.org/biocLite.R")
biocLite("org.Hs.eg.db")
}
if(!require(BiocGenerics)){
source("https://bioconductor.org/biocLite.R")
biocLite("BiocGenerics")
}
if(!require(biomaRt)){
install.packages('biomaRt')
}
if(!require(igraph)){
install.packages('igraph')
}
if(!require(networkD3)){
install.packages('networkD3')
}
library('biomaRt')
library('igraph')
library('networkD3')
library('topGO')
install.packages("biomaRt")
biocLite("biomaRt")
install.packages('igraph')
install.packages("igraph")
install.packages('networkD3')
library('biomaRt')
library('igraph')
library('networkD3')
library('topGO')
# Zhi Huang 03/28/2018
library(plotly)
library('shiny')
library('networkD3')
source('helpers.R')
library('shiny')
library('networkD3')
source('helpers.R')
runApp('Desktop/PseudoFuN_app')
runApp('Desktop/PseudoFuN_app')
annot <<- load("./annot.Rdata")
getwd()
setwd("/home/zhihuan/Desktop/PseudoFuN_app/")
annot <<- load("./annot.Rdata")
load("./annot.Rdata")
annot <<- annot
runApp()
forceNetworkOutput(search2network("ENST00000533288.5",T,dataset(),annot,i))
dataset = load_dataset("CUDAlign54")
forceNetworkOutput(search2network("ENST00000533288.5",T,dataset,annot,i))
i = 1
forceNetworkOutput(search2network("ENST00000533288.5",T,dataset,annot,i))
tabPanel(paste0('Network ',i)).
tabPanel(paste0('Network ',i))
paste0('Network ',i)
runApp()
save(dataset, file="./dataset.Rdata")
runApp()
load("/home/zhihuan/Desktop/PseudoFuN_app/myTabs.Rdata")
myTabs
lapply(c(paste('Network', 1: num_tabs),'GO Analysis','README'), tabPanel)
lapply(c(paste('Network', 1: 4),'GO Analysis','README'), tabPanel)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Downloads/PseudoFuN_app-fd9ca34d797056e306b6ee5095b604c4150cc007/PseudoFuN_app.R')
paste0('net',i)
runApp()
runApp()
runApp()
runApp()
num_tabs
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/TSUNAMI/shiny')
runApp()
library(shinyWidgets)
?sendSweetAlert
runApp()
?switchInput
runApp()
?materialSwitch
runApp()
runApp()
runApp()
runApp()
