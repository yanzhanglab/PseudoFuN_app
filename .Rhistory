rr_sorted_idx = rr_sorted_list$ix
medianB <- rep(0, length(rr))
medianB[ rr_sorted_idx[ceiling(length(rr)/2):length(rr)] ] = 1
ss <- survdiff(Surv(OS, OS_IND) ~ medianB)
finalPValue[i] <- 1-pchisq(ss$chisq, 1)
}
# print("final P value:")
# print(finalPValue)
finalPValue <- as.numeric(finalPValue)
finalPValue
length(finalPValue<0.05)
finalPValue<0.05
sum(finalPValue<0.05)
sum(finalPValue<=0.05)
medianB[ rr_sorted_idx[floor(length(rr)/2):length(rr)] ] = 1
ss <- survdiff(Surv(OS, OS_IND) ~ medianB)
finalPValue[i] <- 1-pchisq(ss$chisq, 1)
for(i in 1:dim(finalExp)[1]){
rr = finalExp[i,]
rr_sorted_list = sort(rr, decreasing = FALSE, index.return=T)
rr_sorted = rr_sorted_list$x
rr_sorted_idx = rr_sorted_list$ix
medianB <- rep(0, length(rr))
medianB[ rr_sorted_idx[round(length(rr)/2):length(rr)] ] = 1
ss <- survdiff(Surv(OS, OS_IND) ~ medianB)
finalPValue[i] <- 1-pchisq(ss$chisq, 1)
}
# print("final P value:")
# print(finalPValue)
finalPValue <- as.numeric(finalPValue)
sum(finalPValue<0.05)
library(shiny)
library(rsconnect)
library(plyr)
library(data.table)
library(genefilter)
library(Biobase)
library(lmQCM)
library(WGCNA)
library(GEOquery)
library(dplyr)
library(enrichR)
library(DT)
library(plotly)
library(openxlsx)
library(survival)
library(naturalsort)
library(shinyWidgets)
# circos plot
library(circlize)
?getGEO
gse <- getGEO('GSE10')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
workdir = "/Volumes/Samsung32GB 1/DrZhiHanResearch/singlecelldata/results/new results (10X_scRNA)/"
exprs.list = c("NS_084_Yoder/CB-ECFC_expr.csv",
"NS_084_Yoder/iPS-ECFC-2_expr.csv",
"NS_085_Yang/KO-6_expr.csv",
"NS_085_Yang/WT-5_expr.csv")
genes.list = c("NS_084_Yoder/CB-ECFC_genes.csv",
"NS_084_Yoder/iPS-ECFC-2_genes.csv",
"NS_085_Yang/KO-6_genes.csv",
"NS_085_Yang/WT-5_genes.csv")
i = 1
expr = read.csv(file=paste(workdir, exprs.list[i], sep = ""), header=T, row.names = 1, sep=",")
gene = read.csv(file=paste(workdir, genes.list[i], sep = ""), header=T, sep=",")
i
install.packages("Seurat")
library(dplyr)
# 05/03/2018 Zhi Huang
library(Seurat)
install.packages()
install.packages("ddalpha")
# 05/03/2018 Zhi Huang
library(Seurat)
# 05/03/2018 Zhi Huang
library(Seurat)
install.packages("ddalpha")
library(ddalpha)
install.packages("ddalpha")
install.packages("ddalpha")
shiny::runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
shiny::runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
shiny::runApp('Desktop/TSUNAMI/shiny')
shiny::runApp('Desktop/TSUNAMI/shiny')
shiny::runApp('Desktop/iGenomicsR_no_image_data')
runApp('Desktop/iGenomicsR_no_image_data')
shiny::runApp('Desktop/iGenomicsR_no_image_data')
runApp('Desktop/iGenomicsR_no_image_data')
load("/Users/zhi/Desktop/DB.Rdata")
load("/Users/zhi/Desktop/PatList.Rdata")
d <- DB[["Mutation_gene"]][,unlist(PatList)]
PatList
DB[["Mutation_gene"]]
unlist(PatList)
View(DB)
DB[["Mutation_gene"]][1:4,1:3]
unlist(PatList)
cname = colnames(DB[["Mutation_gene"]])
cname
unlist(PatList) %in% cname
unlist(PatList)[34]
unlist(PatList)[33]
unlist(PatList)
runApp('Desktop/iGenomicsR_no_image_data')
load("/Users/zhi/Desktop/patients.Rdata")
patients_list <- list()
patients
for(i in colnames(patients)){
patients_list[[i]] <- setdiff(patients[,i], "")
}
patients_list
patients
i
setdiff(patients[,i], "")
setdiff(patients[,1], "")
setdiff(patients[,1], NA)
runApp('Desktop/iGenomicsR_no_image_data')
install.packages('BioCircos')
library(BioCircos)
BioCircos()
myGenome = list("A" = 10560,
"B" = 8808,
"C" = 12014,
"D" = 7664,
"E" = 9403,
"F" = 8661)
BioCircos(genome = myGenome, genomeFillColor = c("tomato2", "darkblue"),
genomeTicksScale = 4e+3)
# 05/29/2018 Zhi Huang
library(BioCircos)
links_chromosomes_1 = c('X', '2', '9') # Chromosomes on which the links should start
links_chromosomes_2 = c('3', '18', '9') # Chromosomes on which the links should end
links_pos_1 = c(155270560, 154978472, 42512974)
links_pos_2 = c(102621477, 140253678, 20484611)
links_labels = c("Link 1", "Link 2", "Link 3")
tracklist = BioCircosBackgroundTrack("myBackgroundTrack", minRadius = 0, maxRadius = 0.55,
borderSize = 0, fillColors = "#EEFFEE")
tracklist = tracklist + BioCircosLinkTrack('myLinkTrack', links_chromosomes_1, links_pos_1,
links_pos_1 + 50000000, links_chromosomes_2, links_pos_2, links_pos_2 + 750000,
maxRadius = 0.55, labels = links_labels)
BioCircos(tracklist, genomeFillColor = "PuOr",
chrPad = 0.02, displayGenomeBorder = FALSE, yChr =  FALSE,
genomeTicksDisplay = FALSE,  genomeLabelTextSize = "8pt", genomeLabelDy = 0)
# 05/29/2018 Zhi Huang
library(BioCircos)
links_chromosomes_1 = c('X', '2', '9') # Chromosomes on which the links should start
links_chromosomes_2 = c('3', '18', '9') # Chromosomes on which the links should end
links_pos_1 = c(155270560, 154978472, 42512974)
links_pos_2 = c(102621477, 140253678, 20484611)
links_labels = c("Link 1", "Link 2", "Link 3")
tracklist = BioCircosBackgroundTrack("myBackgroundTrack", minRadius = 0, maxRadius = 0.55,
borderSize = 0, fillColors = "#EEFFEE")
tracklist = tracklist + BioCircosLinkTrack('myLinkTrack', links_chromosomes_1, links_pos_1,
links_pos_1 + 50000000, links_chromosomes_2, links_pos_2, links_pos_2 + 750000,
maxRadius = 0.55, labels = links_labels)
BioCircos(tracklist, genomeFillColor = "PuOr",
chrPad = 0.02, displayGenomeBorder = FALSE, yChr =  FALSE,
genomeTicksDisplay = FALSE,  genomeLabelTextSize = "8pt", genomeLabelDy = 0)
shiny::runApp('Desktop/iGenomicsR_no_image_data')
runApp('Desktop/iGenomicsR_no_image_data')
load("/Users/zhi/Desktop/DB.Rdata")
load("/Users/zhi/Desktop/ordered_samples.Rdata")
load("/Users/zhi/Desktop/protein_genes.Rdata")
protein_genes
protein <- DB[["Protein"]][protein_genes,ordered_samples,drop=FALSE]
protein
res[["protein_data"]] <- t(protein)
t(protein)
protein <- t(apply(protein, 1, scale))
head(protein)
ordered_samples
colnames(protein) <- ordered_samples
protein
melt(protein)
library(reshape)
melt(protein)
protein <- melt(protein)
protein[["Var2"]] <- factor(protein[["Var2"]], levels=ordered_samples, ordered = TRUE)
ordered_samples
protein[["Var2"]]
protein <- DB[["Protein"]][protein_genes,ordered_samples,drop=FALSE]
protein <- t(apply(protein, 1, scale))
colnames(protein) <- ordered_samples
protein <- melt(protein)
View(protein)
View(protein)
print(length(protein_genes))
shiny::runApp('Desktop/iGenomicsR_no_image_data')
library(reshape2)
protein <- DB[["Protein"]][protein_genes,ordered_samples,drop=FALSE]
protein <- t(apply(protein, 1, scale))
colnames(protein) <- ordered_samples
protein <- melt(protein)
protein
?melt
detach("package:reshape", unload=TRUE)
protein <- DB[["Protein"]][protein_genes,ordered_samples,drop=FALSE]
protein <- t(apply(protein, 1, scale))
colnames(protein) <- ordered_samples
protein <- melt(protein)
View(protein)
View(protein)
protein[["Var2"]] <- factor(protein[["Var2"]], levels=ordered_samples, ordered = TRUE)
protein[["Var1"]] <- factor(protein[["Var1"]], levels=protein_genes, ordered = TRUE)
View(protein)
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1)) +
guides(fill = guide_colorbar(barwidth = 10, barheight = 1), direction = "vertical") +
theme_bw() + my_theme +
labs(x="", y="") + theme(plot.margin=unit(c(0,0,0,0), "cm"))
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1)) +
guides(fill = guide_colorbar(barwidth = 10, barheight = 1), direction = "vertical")
View(protein)
ordered_samples
protein_genes
protein <- DB[["Protein"]][protein_genes,ordered_samples,drop=FALSE]
# res[["protein_data"]] <- t(protein)
protein <- t(apply(protein, 1, scale))
colnames(protein) <- ordered_samples
protein <- melt(protein)
save(protein, file = "~/Desktop/protein.Rdata")
protein[["Var2"]] <- factor(protein[["Var2"]], levels=ordered_samples, ordered = F)
protein[["Var1"]] <- factor(protein[["Var1"]], levels=protein_genes, ordered = F)
PL[["protein_plot"]] <- ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1)) +
guides(fill = guide_colorbar(barwidth = 10, barheight = 1), direction = "vertical")
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1)) +
guides(fill = guide_colorbar(barwidth = 10, barheight = 1), direction = "vertical")
protein[["Var2"]] <- factor(protein[["Var2"]], levels=ordered_samples, ordered = TRUE)
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1)) +
guides(fill = guide_colorbar(barwidth = 10, barheight = 1), direction = "vertical")
protein$variable
protein$Var1
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1)) +
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1
))
ggplot(protein,  aes(Var2, Var1))
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value))
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1)) +
guides(fill = guide_colorbar(barwidth = 10, barheight = 1), direction = "vertical") +
geom_bar(aes(x=Var1), data=protein, stat="identity")
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1)) +
guides(fill = guide_colorbar(barwidth = 10, barheight = 1), direction = "vertical") +
geom_bar(aes(x=Var1), stat="identity")
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1)) +
guides(fill = guide_colorbar(barwidth = 10, barheight = 1), direction = "vertical") +
geom_bar(aes(x=Var1))
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1)) +
guides(fill = guide_colorbar(barwidth = 10, barheight = 1), direction = "vertical") +
geom_bar( data=protein, stat="identity")
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value),data=protein) +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1)) +
guides(fill = guide_colorbar(barwidth = 10, barheight = 1), direction = "vertical")
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value),data=protein, stat="identity") +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1)) +
guides(fill = guide_colorbar(barwidth = 10, barheight = 1), direction = "vertical")
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value, x = Var1))
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value, x = Var1)) +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1)) +
guides(fill = guide_colorbar(barwidth = 10, barheight = 1), direction = "vertical")
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = Var1))
ggplot(protein,  aes(Var1, Var2)) +
geom_tile(aes(fill = value))
protein_genes
protein_genes = c("AR-R-V", "c-Kit-R-V")
protein <- DB[["Protein"]][protein_genes,ordered_samples,drop=FALSE]
protein <- t(apply(protein, 1, scale))
colnames(protein) <- ordered_samples
protein <- melt(protein)
save(protein, file = "~/Desktop/protein.Rdata")
protein[["Var2"]] <- factor(protein[["Var2"]], levels=ordered_samples, ordered = TRUE)
protein[["Var1"]] <- factor(protein[["Var1"]], levels=protein_genes, ordered = TRUE)
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value))
ggplot(protein,  aes(Var1, Var2)) +
geom_tile(aes(fill = value))
protein_genes
rev(protein_genes)
runApp('Desktop/iGenomicsR_no_image_data')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/iGenomicsR_no_image_data')
runApp('Desktop/iGenomicsR_no_image_data')
DB[["Mutation_gene"]]
mutation_genes %in% DB[["Mutation_gene"]]
mutation_genes = c("TP53", "PTEN")
mutation_genes %in% DB[["Mutation_gene"]]
!mutation_genes %in% DB[["Mutation_gene"]]
mutation_genes[!(mutation_genes %in% DB[["Mutation_gene"]])]
mutation_genes = c("TP53", "PTEN", "PTEN-R-V")
not_in_list = mutation_genes[!(mutation_genes %in% DB[["Mutation_gene"]])]
not_in_list
not_in_list = mutation_genes[!(mutation_genes %in% DB[["Protein"]])]
not_in_list
DB[["Mutation_gene"]]
mutation_genes = c("A4GALT", "AAAS", "asdfasdf")
not_in_list = mutation_genes[!(mutation_genes %in% DB[["Mutation_gene"]])]
not_in_list
(mutation_genes %in% DB[["Mutation_gene"]])
rownames(DB[["Mutation_gene"]])
not_in_list = mutation_genes[!(mutation_genes %in% rownames(DB[["Mutation_gene"]]))]
not_in_list
print(not_in_list + "genes not found in DB.")
print(not_in_list,"genes not found in DB.")
print(c(not_in_list "genes not found in DB."))
print(c(not_in_list, "genes not found in DB."))
mutation_genes
mutation_genes = c("A4GALT", "AAAS", "asdfasdf", "qwed2")
not_in_list = mutation_genes[!(mutation_genes %in% rownames(DB[["Mutation_gene"]]))]
not_in_list
paste(not_in_list, sep ='')
paste(not_in_list, collapse ='')
paste(not_in_list, collapse =', ')
not_in_list = mutation_genes[!(mutation_genes %in% rownames(DB[["Mutation_gene"]]))]
not_in_list = paste(not_in_list, collapse =', ')
print(sprintf("genes %s not found in DB."),not_in_list)
print(sprintf("genes %s not found in DB.", not_in_list))
print(sprintf("genes [ %s ] not found in DB.", not_in_list))
runApp('Desktop/iGenomicsR_no_image_data')
mutation_genes = c("v","b","c","v")
mutation_genes <- unique(mutation_genes)
mutation_genes
image_features=vector()
image_features <- unique(image_features)
image_features
image_features=vector()
image_features
protein_genes = c( "AR-R-V", "PTEN-R-V", "Bcl-2-M-V")
protein_genes
t <- try(protein <- DB[["Protein"]][protein_genes,ordered_samples,drop=FALSE])
protein
protein <- t(apply(protein, 1, scale))
colnames(protein) <- ordered_samples
protein <- melt(protein)
protein$Var1
protein[["Var2"]] <- factor(protein[["Var2"]], levels=ordered_samples, ordered = TRUE)
protein[["Var1"]] <- factor(protein[["Var1"]], levels=protein_genes, ordered = TRUE)
protein$Var1
protein_genes
# plot both epithelial expression and stroma expression
protein_genes = rev(protein_genes) # This is for descending order of names in y axis
t <- try(protein <- DB[["Protein"]][protein_genes,ordered_samples,drop=FALSE])
protein <- t(apply(protein, 1, scale))
colnames(protein) <- ordered_samples
protein <- melt(protein)
protein[["Var2"]] <- factor(protein[["Var2"]], levels=ordered_samples, ordered = TRUE)
protein[["Var1"]] <- factor(protein[["Var1"]], levels=protein_genes, ordered = TRUE)
protein$Var1
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1)) +
guides(fill = guide_colorbar(barwidth = 10, barheight = 1), direction = "vertical")
levels(protein_genes$Var1)
protein_genes$Var1$levels
level(protein_genes$Var1)
level(protein_genes)
level(protein$Var1)
levels(protein$Var1)
print(levels(protein$Var1))
runApp('Desktop/iGenomicsR_no_image_data')
runApp('Desktop/iGenomicsR_no_image_data')
protein_genes
protein_genes = c(  "AR-R-V", "Bcl-2-M-V", "PTEN-R-V")
protein_genes
# plot both epithelial expression and stroma expression
protein_genes = rev(protein_genes) # This is for descending order of names in y axis
protein_genes
t <- try(protein <- DB[["Protein"]][protein_genes,ordered_samples,drop=FALSE])
res[["protein_data"]] <- t(protein)
protein <- t(apply(protein, 1, scale))
colnames(protein) <- ordered_samples
protein <- melt(protein)
protein[["Var2"]] <- factor(protein[["Var2"]], levels=ordered_samples, ordered = TRUE)
protein[["Var1"]] <- factor(protein[["Var1"]], levels=protein_genes, ordered = TRUE)
print("levels: (order from bottom to top in plot.")
print(levels(protein$Var1))
ggplot(protein,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=round(seq(min(protein$value),max(protein$value),(max(protein$value)-min(protein$value))/5), digits=1)) +
guides(fill = guide_colorbar(barwidth = 10, barheight = 1), direction = "vertical")
runApp('Desktop/iGenomicsR_no_image_data')
#source("https://bioconductor.org/biocLite.R")
# biocLite("DESeq2")
library(DESeq2)
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library(DESeq2)
options(stringsAsFactors = FALSE)
KIRC_coxnnet = read.csv("~/Documents/deseq2/log_counts.csv",header=FALSE)
raw = read.csv(file="~/Documents/deseq2/gdac.broadinstitute.org_KIRC.Merge_rnaseq__illuminahiseq_rnaseq__unc_edu__Level_3__gene_expression__data.Level_3.2016012800.0.0/KIRC.rnaseq__illuminahiseq_rnaseq__unc_edu__Level_3__gene_expression__data.data.txt",
header=T, sep="\t")
raw_counts = raw[2:dim(raw)[1], raw[1,] == "raw_counts"]
# set row names as gene name
rownames(raw_counts)<-raw[2:dim(raw)[1], raw[1,] == "gene"]
raw_counts = lapply(raw_counts, as.numeric)
raw_counts = data.frame(raw_counts)
## Create a coldata frame and instantiate the DESeqDataSet. See ?DESeqDataSetFromMatrix
condition<- factor(rep("kidneyCancerExpr",537))
coldata <- data.frame(row.names=colnames(raw_counts), condition)
# design=~1 means no design
dds <- DESeqDataSetFromMatrix(countData=raw_counts, colData=coldata, design=~1)
dds <- estimateSizeFactors( dds )
#log transform
logcounts <- log2( counts(dds, normalized=TRUE)+1)
write.csv(logcounts,file = "~/Documents/deseq2/logcounts_kidneyCancer.csv",quote = F,col.names = T,row.names = F)
KIRC_coxnnet = read.csv("~/Documents/deseq2/log_counts.csv",header=FALSE)
dim(logcounts)
raw_counts = raw[2:dim(raw)[1], raw[1,] == "raw_counts"]
# set row names as gene name
rownames(raw_counts)<-raw[2:dim(raw)[1], raw[1,] == "gene"]
raw_counts = lapply(raw_counts, as.numeric)
raw_counts = data.frame(raw_counts)
raw[1,]
raw[1,] == "gene"
raw[1,] == "gene"
raw[1,1:4]
rownames(raw_counts)
raw[1:5,1:5]
2:dim(raw)[1]
raw[2:10,1]
raw[2:10,1raw[2:dim(raw)[1], 1]]
raw[2:dim(raw)[1], 1]
raw[1:5, 1]
rownames(raw_counts)<-raw[2:dim(raw)[1], 1]
rownames(raw_counts)
condition<- factor(rep("kidneyCancerExpr",537))
coldata <- data.frame(row.names=colnames(raw_counts), condition)
dds <- DESeqDataSetFromMatrix(countData=raw_counts, colData=coldata, design=~1)
dds = dds[rowSums(counts(dds))>5,]
dds = dds[rowSums(counts(dds))>10,]
dds = dds[rowSums(counts(dds))>100,]
dds = dds[rowSums(counts(dds))>200,]
dds = dds[rowSums(counts(dds))>250,]
dds = dds[rowSums(counts(dds))>255,]
dds = dds[rowSums(counts(dds))>280,]
dds = dds[rowSums(counts(dds))>300,]
dds = dds[rowSums(counts(dds))>350,]
# design=~1 means no design
dds <- DESeqDataSetFromMatrix(countData=raw_counts, colData=coldata, design=~1)
dds = dds[rowSums(counts(dds))>350,]
dds = dds[rowSums(counts(dds))>351,]
dds = dds[rowSums(counts(dds))>352,]
# design=~1 means no design
dds <- DESeqDataSetFromMatrix(countData=raw_counts, colData=coldata, design=~1)
dds <- estimateSizeFactors( dds )
#log transform
logcounts <- log2( counts(dds, normalized=TRUE)+1)
hist(KIRC_coxnnet)
range(KIRC_coxnnet)
hist(KIRC_coxnnet)
hist(logcounts)
#log transform
logcounts <- log2( counts(dds, normalized=TRUE))
hist(logcounts)
scale(logcounts)
range(logcounts)
#log transform
logcounts <- log2( counts(dds, normalized=TRUE)+0.01)
hist(logcounts)
#log transform
logcounts <- loge( counts(dds, normalized=TRUE)+0.0001)
#log transform
logcounts <- log( counts(dds, normalized=TRUE)+0.0001)
hist(logcounts)
#log transform
logcounts <- log10( counts(dds, normalized=TRUE)+0.0001)
hist(logcounts)
#log transform
logcounts <- log2( counts(dds, normalized=TRUE)+0.0001)
hist(logcounts)
#log transform
logcounts <- log2( counts(dds, normalized=TRUE)+1)
hist(logcounts)
logcounts.scale <- scale(logcounts) # standardize to zero mean and unit std
hist(logcounts.scale)
mean(logcounts.scale)
std(logcounts.scale)
write.csv(logcounts,file = "~/Documents/deseq2/logcounts_kidneyCancer.csv",quote = F,col.names = T,row.names = F)
hist(as.matrix(KIRC_coxnnet))
hist(logcounts)
rownames(logcounts.scale)
write.csv(logcounts,file = "~/Documents/deseq2/logcounts_kidneyCancer.csv",quote = F,col.names = T,row.names = T)
shiny::runApp('Desktop/PseudoFuN_app')
